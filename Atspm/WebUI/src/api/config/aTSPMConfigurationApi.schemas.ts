/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
export type PatchWatchDogIgnoreEventFromKeyParams = {
select?: string;
expand?: string;
};

export type PutWatchDogIgnoreEventFromKeyParams = {
select?: string;
expand?: string;
};

export type GetWatchDogIgnoreEventFromKeyParams = {
select?: string;
expand?: string;
};

export type GetWatchDogIgnoreEventCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostWatchDogIgnoreEventParams = {
select?: string;
expand?: string;
};

export type GetWatchDogIgnoreEventParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchVersionHistoryFromKeyParams = {
select?: string;
expand?: string;
};

export type PutVersionHistoryFromKeyParams = {
select?: string;
expand?: string;
};

export type GetVersionHistoryFromKeyParams = {
select?: string;
expand?: string;
};

export type GetVersionHistoryCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostVersionHistoryParams = {
select?: string;
expand?: string;
};

export type GetVersionHistoryParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchRouteLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type PutRouteLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRouteLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRouteLocationCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostRouteLocationParams = {
select?: string;
expand?: string;
};

export type GetRouteLocationParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchRouteDistanceFromKeyParams = {
select?: string;
expand?: string;
};

export type PutRouteDistanceFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRouteDistanceFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRouteDistanceCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostRouteDistanceParams = {
select?: string;
expand?: string;
};

export type GetRouteDistanceParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams = {
select?: string;
};

export type GetRouteDistanceNextLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteDistanceNextLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteDistancePreviousLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteDistancePreviousLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchRouteFromKeyParams = {
select?: string;
expand?: string;
};

export type PutRouteFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRouteFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRouteCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostRouteParams = {
select?: string;
expand?: string;
};

export type GetRouteParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteRouteViewFromIdParams = {
includeLocationDetail?: boolean;
'api-version'?: string;
select?: string;
expand?: string;
};

export type UpsertRouteRouteParams = {
'api-version'?: string;
select?: string;
expand?: string;
};

export type GetRouteRouteLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRouteRouteLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRegionCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PutRegionFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRegionFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchRegionFromKeyParams = {
select?: string;
expand?: string;
};

export type GetRegionParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostRegionParams = {
select?: string;
expand?: string;
};

export type GetRegionLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetRegionLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchProductFromKeyParams = {
select?: string;
expand?: string;
};

export type PutProductFromKeyParams = {
select?: string;
expand?: string;
};

export type GetProductFromKeyParams = {
select?: string;
expand?: string;
};

export type GetProductCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostProductParams = {
select?: string;
expand?: string;
};

export type GetProductParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchMenuItemsFromKeyParams = {
select?: string;
expand?: string;
};

export type PutMenuItemsFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMenuItemsFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMenuItemsCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostMenuItemsParams = {
select?: string;
expand?: string;
};

export type GetMenuItemsParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchMeasureTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PutMeasureTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMeasureTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMeasureTypeCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostMeasureTypeParams = {
select?: string;
expand?: string;
};

export type GetMeasureTypeParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeMeasureCommentsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeMeasureCommentsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeDetectionTypesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureTypeDetectionTypesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchMeasureOptionFromKeyParams = {
select?: string;
expand?: string;
};

export type PutMeasureOptionFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMeasureOptionFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMeasureOptionCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostMeasureOptionParams = {
select?: string;
expand?: string;
};

export type GetMeasureOptionParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchMeasureCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type PutMeasureCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMeasureCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type GetMeasureCommentCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostMeasureCommentParams = {
select?: string;
expand?: string;
};

export type GetMeasureCommentParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureCommentMeasureTypesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetMeasureCommentMeasureTypesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchLocationTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PutLocationTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetLocationTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetLocationTypeCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostLocationTypeParams = {
select?: string;
expand?: string;
};

export type GetLocationTypeParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationTypeLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationTypeLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type PutLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type GetLocationFromKeyParams = {
select?: string;
expand?: string;
};

export type GetLocationCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostLocationParams = {
select?: string;
expand?: string;
};

export type GetLocationParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationLocationsForSearchParams = {
/**
 * Locations by area
 */
areaId?: number;
/**
 * Locations by region
 */
regionId?: number;
/**
 * Locations by jurisdiction
 */
jurisdictionId?: number;
/**
 * Locations by chart type
 */
metricTypeId?: number;
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationDetectionTypeCountParams = {
date?: string;
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationLatestVersionOfAllLocationsParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationAllVersionsOfLocationFromIdentifierParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationLatestVersionOfLocationFromIdentifierParams = {
select?: string;
expand?: string;
};

export type DeleteLocationSetLocationTodFromKeyParams = {
select?: string;
expand?: string;
};

export type GetLocationCopyLocationToNewVersionFromKeyParams = {
select?: string;
expand?: string;
};

export type GetLocationDevicesCountFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationDevicesFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationAreasCountFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationAreasFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationApproachesCountFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetLocationApproachesFromKeyParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetJurisdictionCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PutJurisdictionFromKeyParams = {
select?: string;
expand?: string;
};

export type GetJurisdictionFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchJurisdictionFromKeyParams = {
select?: string;
expand?: string;
};

export type GetJurisdictionParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostJurisdictionParams = {
select?: string;
expand?: string;
};

export type GetJurisdictionLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetJurisdictionLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetFaqCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PutFaqFromKeyParams = {
select?: string;
expand?: string;
};

export type GetFaqFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchFaqFromKeyParams = {
select?: string;
expand?: string;
};

export type GetFaqParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostFaqParams = {
select?: string;
expand?: string;
};

export type PatchDirectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDirectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDirectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDirectionTypeCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDirectionTypeParams = {
select?: string;
expand?: string;
};

export type GetDirectionTypeParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypeOpposingDirectionsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypeOpposingDirectionsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypePrimaryDirectionsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypePrimaryDirectionsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypeApproachesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDirectionTypeApproachesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchDeviceConfigurationFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDeviceConfigurationFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDeviceConfigurationFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDeviceConfigurationCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDeviceConfigurationParams = {
select?: string;
expand?: string;
};

export type GetDeviceConfigurationParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceConfigurationEventLogDecodersParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceConfigurationDevicesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceConfigurationDevicesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchDeviceFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDeviceFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDeviceFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDeviceCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDeviceParams = {
select?: string;
expand?: string;
};

export type GetDeviceParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceActiveDevicesCountParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDeviceActiveDevicesByLocationFromLocationIdParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchDetectorCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDetectorCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDetectorCommentFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDetectorCommentCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDetectorCommentParams = {
select?: string;
expand?: string;
};

export type GetDetectorCommentParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchDetectorFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDetectorFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDetectorFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDetectorCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDetectorParams = {
select?: string;
expand?: string;
};

export type GetDetectorParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectorDetectionTypesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectorDetectionTypesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectorDetectorCommentsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectorDetectorCommentsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PatchDetectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type PutDetectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDetectionTypeFromKeyParams = {
select?: string;
expand?: string;
};

export type GetDetectionTypeCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostDetectionTypeParams = {
select?: string;
expand?: string;
};

export type GetDetectionTypeParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectionTypeMeasureTypesCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectionTypeMeasureTypesFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectionTypeDetectorsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetDetectionTypeDetectorsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetAreaCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PutAreaFromKeyParams = {
select?: string;
expand?: string;
};

export type GetAreaFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchAreaFromKeyParams = {
select?: string;
expand?: string;
};

export type GetAreaParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostAreaParams = {
select?: string;
expand?: string;
};

export type GetAreaLocationsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetAreaLocationsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetApproachCountParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PutApproachFromKeyParams = {
select?: string;
expand?: string;
};

export type GetApproachFromKeyParams = {
select?: string;
expand?: string;
};

export type PatchApproachFromKeyParams = {
select?: string;
expand?: string;
};

export type GetApproachParams = {
select?: string;
expand?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type PostApproachParams = {
select?: string;
expand?: string;
};

export type GetApproachApproachDtoFromIdParams = {
'api-version'?: string;
select?: string;
expand?: string;
};

export type UpsertApproachApproachParams = {
'api-version'?: string;
select?: string;
expand?: string;
};

export type GetApproachDetectorsCountFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type GetApproachDetectorsFromKeyParams = {
select?: string;
filter?: string;
orderby?: string;
top?: number;
skip?: number;
count?: boolean;
};

export type WatchDogIssueTypes = typeof WatchDogIssueTypes[keyof typeof WatchDogIssueTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WatchDogIssueTypes = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
} as const;

export type WatchDogComponentTypes = typeof WatchDogComponentTypes[keyof typeof WatchDogComponentTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WatchDogComponentTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface WatchDogIgnoreEvent {
  componentId?: number | null;
  componentType: WatchDogComponentTypes;
  end: string;
  id: number;
  issueType: WatchDogIssueTypes;
  location: Location;
  locationId: number;
  locationIdentifier?: string | null;
  phase?: number | null;
  start: string;
}

export interface VersionHistory {
  children?: VersionHistory[] | null;
  date: string;
  id: number;
  name?: string | null;
  notes?: string | null;
  parent: VersionHistory;
  parentId?: number | null;
  version: number;
}

export interface UserJurisdiction {
  jurisdiction: Jurisdiction;
  jurisdictionId: number;
  userId?: string | null;
}

export interface UserArea {
  area: Area;
  areaId: number;
  userId?: string | null;
}

export type TransportProtocols = typeof TransportProtocols[keyof typeof TransportProtocols];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransportProtocols = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
} as const;

export interface SearchLocation {
  areas?: number[] | null;
  chartEnabled: boolean;
  charts?: number[] | null;
  hasRampDevice?: boolean | null;
  id: number;
  jurisdictionId?: number | null;
  latitude: number;
  locationIdentifier?: string | null;
  locationTypeId: number;
  longitude: number;
  primaryName?: string | null;
  regionId?: number | null;
  secondaryName?: string | null;
  start: string;
}

export interface RouteDto {
  id?: number | null;
  name?: string | null;
  routeLocations?: RouteLocationDto[] | null;
}

export interface RouteDistanceDto {
  distance: number;
  id: number;
  locationIdentifierA?: string | null;
  locationIdentifierB?: string | null;
}

export interface RouteLocationDto {
  approaches?: RouteApproachDto[] | null;
  id: number;
  isOpposingOverlap: boolean;
  isPrimaryOverlap: boolean;
  latitude: number;
  locationId?: number | null;
  locationIdentifier?: string | null;
  longitude: number;
  nextLocationDistance: RouteDistanceDto;
  nextLocationDistanceId?: number | null;
  opposingDirectionDescription?: string | null;
  opposingDirectionId: number;
  opposingPhase: number;
  order: number;
  previousLocationDistance: RouteDistanceDto;
  previousLocationDistanceId?: number | null;
  primaryDirectionDescription?: string | null;
  primaryDirectionId: number;
  primaryName?: string | null;
  primaryPhase: number;
  routeId: number;
  secondaryName?: string | null;
}

export interface RouteDistance {
  distance: number;
  id: number;
  locationIdentifierA?: string | null;
  locationIdentifierB?: string | null;
  nextLocations?: RouteLocation[] | null;
  previousLocations?: RouteLocation[] | null;
}

export interface RouteApproachDto {
  description?: string | null;
  detectors?: RouteDetectorDto[] | null;
  id: number;
  isPedestrianPhaseOverlap: boolean;
  isPermissivePhaseOverlap: boolean;
  isProtectedPhaseOverlap: boolean;
  locationId: number;
  mph?: number | null;
  pedestrianDetectors?: string | null;
  pedestrianPhaseNumber?: number | null;
  permissivePhaseNumber?: number | null;
  protectedPhaseNumber: number;
}

export interface Route {
  id: number;
  name?: string | null;
  routeLocations?: RouteLocation[] | null;
}

export interface RouteLocation {
  id: number;
  isOpposingOverlap: boolean;
  isPrimaryOverlap: boolean;
  locationIdentifier?: string | null;
  nextLocationDistance: RouteDistance;
  nextLocationDistanceId?: number | null;
  opposingDirection: DirectionType;
  opposingDirectionId: DirectionTypes;
  opposingPhase: number;
  order: number;
  previousLocationDistance: RouteDistance;
  previousLocationDistanceId?: number | null;
  primaryDirection: DirectionType;
  primaryDirectionId: DirectionTypes;
  primaryPhase: number;
  route: Route;
  routeId: number;
}

export interface Region {
  description?: string | null;
  id: number;
  locations?: Location[] | null;
  userRegions?: UserRegion[] | null;
}

export interface UserRegion {
  region: Region;
  regionId: number;
  userId?: string | null;
}

export interface Product {
  id: number;
  manufacturer?: string | null;
  model?: string | null;
  notes?: string | null;
  webPage?: string | null;
}

export type MovementTypes = typeof MovementTypes[keyof typeof MovementTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MovementTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
} as const;

export interface RouteDetectorDto {
  approachId: number;
  dateAdded: string;
  dateDisabled?: string | null;
  decisionPoint?: number | null;
  dectectorIdentifier?: string | null;
  detectionHardware: DetectionHardwareTypes;
  detectorChannel: number;
  distanceFromStopBar?: number | null;
  id: number;
  laneNumber?: number | null;
  laneType: LaneTypes;
  latencyCorrection: number;
  minSpeedFilter?: number | null;
  movementDelay?: number | null;
  movementType: MovementTypes;
}

export interface MenuItem {
  children?: MenuItem[] | null;
  displayOrder: number;
  document?: string | null;
  icon?: string | null;
  id: number;
  link?: string | null;
  name?: string | null;
  parent: MenuItem;
  parentId?: number | null;
}

export interface MeasureOptionDto {
  id?: number | null;
  measureTypeId: number;
  option?: string | null;
  value?: string | null;
}

export interface MeasureTypeDto {
  abbreviation?: string | null;
  displayOrder: number;
  id?: number | null;
  measureComments?: MeasureCommentsDto[] | null;
  measureOptions?: MeasureOptionDto[] | null;
  name?: string | null;
  showOnAggregationSite: boolean;
  showOnWebsite: boolean;
}

export interface MeasureOption {
  id: number;
  measureType: MeasureType;
  measureTypeId: number;
  option?: string | null;
  value?: string | null;
}

export interface MeasureCommentsDto {
  comment?: string | null;
  id?: number | null;
  locationIdentifier?: string | null;
  timeStamp: string;
}

export interface MeasureComment {
  comment?: string | null;
  id: number;
  locationIdentifier?: string | null;
  measureTypes?: MeasureType[] | null;
  timeStamp: string;
}

export interface MeasureType {
  abbreviation?: string | null;
  detectionTypes?: DetectionType[] | null;
  displayOrder: number;
  id: number;
  measureComments?: MeasureComment[] | null;
  measureOptions?: MeasureOption[] | null;
  name?: string | null;
  showOnAggregationSite: boolean;
  showOnWebsite: boolean;
}

export type LocationVersionActions = typeof LocationVersionActions[keyof typeof LocationVersionActions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocationVersionActions = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_10: 10,
} as const;

export type LaneTypes = typeof LaneTypes[keyof typeof LaneTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LaneTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
} as const;

export interface Jurisdiction {
  countyParish?: string | null;
  id: number;
  locations?: Location[] | null;
  mpo?: string | null;
  name?: string | null;
  otherPartners?: string | null;
  userJurisdictions?: UserJurisdiction[] | null;
}

export interface Location {
  approaches?: Approach[] | null;
  areas?: Area[] | null;
  chartEnabled: boolean;
  devices?: Device[] | null;
  id: number;
  jurisdiction: Jurisdiction;
  jurisdictionId?: number | null;
  latitude: number;
  locationIdentifier?: string | null;
  locationType: LocationType;
  locationTypeId: number;
  longitude: number;
  note?: string | null;
  pedsAre1to1: boolean;
  primaryName?: string | null;
  region: Region;
  regionId?: number | null;
  secondaryName?: string | null;
  start: string;
  versionAction: LocationVersionActions;
}

export interface LocationType {
  icon?: string | null;
  id: number;
  locations?: Location[] | null;
  name?: string | null;
}

export interface Faq {
  body?: string | null;
  displayOrder: number;
  header?: string | null;
  id: number;
}

export type DirectionTypes = typeof DirectionTypes[keyof typeof DirectionTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DirectionTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
} as const;

export interface DirectionType {
  abbreviation?: string | null;
  approaches?: Approach[] | null;
  description?: string | null;
  displayOrder: number;
  id: DirectionTypes;
  opposingDirections?: RouteLocation[] | null;
  primaryDirections?: RouteLocation[] | null;
}

export type DeviceTypes = typeof DeviceTypes[keyof typeof DeviceTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeviceTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
} as const;

export type DeviceStatus = typeof DeviceStatus[keyof typeof DeviceStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeviceStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
} as const;

export interface DeviceGroup {
  count: number;
  firmware?: string | null;
  manufacturer?: string | null;
  model?: string | null;
}

export interface Device {
  deviceConfiguration: DeviceConfiguration;
  deviceConfigurationId?: number | null;
  deviceIdentifier?: string | null;
  deviceStatus: DeviceStatus;
  deviceType: DeviceTypes;
  id: number;
  ipaddress?: string | null;
  location: Location;
  locationId: number;
  loggingEnabled: boolean;
  notes?: string | null;
}

export interface DeviceConfiguration {
  connectionTimeout: number;
  decoders?: string[] | null;
  description?: string | null;
  devices?: Device[] | null;
  id: number;
  loggingOffset: number;
  notes?: string | null;
  operationTimeout: number;
  password?: string | null;
  path?: string | null;
  port: number;
  product: Product;
  productId?: number | null;
  protocol: TransportProtocols;
  query?: string[] | null;
  userName?: string | null;
}

export interface DetectorDto {
  approachId?: number | null;
  dateAdded: string;
  dateDisabled?: string | null;
  decisionPoint?: number | null;
  dectectorIdentifier?: string | null;
  detectionHardware: DetectionHardwareTypes;
  detectionTypes?: DetectionTypeDto[] | null;
  detectorChannel: number;
  distanceFromStopBar?: number | null;
  id?: number | null;
  laneNumber?: number | null;
  laneType: LaneTypes;
  latencyCorrection: number;
  minSpeedFilter?: number | null;
  movementDelay?: number | null;
  movementType: MovementTypes;
}

export interface Detector {
  approach: Approach;
  approachId: number;
  dateAdded: string;
  dateDisabled?: string | null;
  decisionPoint?: number | null;
  dectectorIdentifier?: string | null;
  detectionHardware: DetectionHardwareTypes;
  detectionTypes?: DetectionType[] | null;
  detectorChannel: number;
  detectorComments?: DetectorComment[] | null;
  distanceFromStopBar?: number | null;
  id: number;
  laneNumber?: number | null;
  laneType: LaneTypes;
  latencyCorrection: number;
  minSpeedFilter?: number | null;
  movementDelay?: number | null;
  movementType: MovementTypes;
}

export interface DetectorComment {
  comment?: string | null;
  detector: Detector;
  detectorId: number;
  id: number;
  timeStamp: string;
}

export type DetectionTypes = typeof DetectionTypes[keyof typeof DetectionTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetectionTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
  NUMBER_10: 10,
  NUMBER_11: 11,
} as const;

export interface DetectionTypeGroup {
  count: number;
  id?: string | null;
}

export interface DetectionTypeDto {
  abbreviation?: string | null;
  description?: string | null;
  displayOrder: number;
  id: DetectionTypes;
  measureTypes?: MeasureTypeDto[] | null;
}

export interface DetectionType {
  abbreviation?: string | null;
  description?: string | null;
  detectors?: Detector[] | null;
  displayOrder: number;
  id: DetectionTypes;
  measureTypes?: MeasureType[] | null;
}

export type DetectionHardwareTypes = typeof DetectionHardwareTypes[keyof typeof DetectionHardwareTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetectionHardwareTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
} as const;

export interface Area {
  id: number;
  locations?: Location[] | null;
  name?: string | null;
  userAreas?: UserArea[] | null;
}

export interface ApproachDto {
  description?: string | null;
  detectors?: DetectorDto[] | null;
  directionTypeId: DirectionTypes;
  id?: number | null;
  isPedestrianPhaseOverlap: boolean;
  isPermissivePhaseOverlap: boolean;
  isProtectedPhaseOverlap: boolean;
  locationId: number;
  mph?: number | null;
  pedestrianDetectors?: string | null;
  pedestrianPhaseNumber?: number | null;
  permissivePhaseNumber?: number | null;
  protectedPhaseNumber: number;
}

export interface Approach {
  description?: string | null;
  detectors?: Detector[] | null;
  directionType: DirectionType;
  directionTypeId: DirectionTypes;
  id: number;
  isPedestrianPhaseOverlap: boolean;
  isPermissivePhaseOverlap: boolean;
  isProtectedPhaseOverlap: boolean;
  location: Location;
  locationId: number;
  mph?: number | null;
  pedestrianDetectors?: string | null;
  pedestrianPhaseNumber?: number | null;
  permissivePhaseNumber?: number | null;
  protectedPhaseNumber: number;
}

