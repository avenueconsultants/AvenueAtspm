/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from 'react-query'
import { useMutation, useQuery } from 'react-query'
import { configRequest } from '../../lib/axios'
import type {
  Approach,
  ApproachDto,
  Area,
  DeleteLocationSetLocationTodFromKeyParams,
  DetectionType,
  DetectionTypeGroup,
  Detector,
  DetectorComment,
  Device,
  DeviceConfiguration,
  DeviceGroup,
  DirectionType,
  Faq,
  GetApproachApproachDtoFromIdParams,
  GetApproachCountParams,
  GetApproachDetectorsCountFromKeyParams,
  GetApproachDetectorsFromKeyParams,
  GetApproachFromKeyParams,
  GetApproachParams,
  GetAreaCountParams,
  GetAreaFromKeyParams,
  GetAreaLocationsCountFromKeyParams,
  GetAreaLocationsFromKeyParams,
  GetAreaParams,
  GetDetectionTypeCountParams,
  GetDetectionTypeDetectorsCountFromKeyParams,
  GetDetectionTypeDetectorsFromKeyParams,
  GetDetectionTypeFromKeyParams,
  GetDetectionTypeMeasureTypesCountFromKeyParams,
  GetDetectionTypeMeasureTypesFromKeyParams,
  GetDetectionTypeParams,
  GetDetectorCommentCountParams,
  GetDetectorCommentFromKeyParams,
  GetDetectorCommentParams,
  GetDetectorCountParams,
  GetDetectorDetectionTypesCountFromKeyParams,
  GetDetectorDetectionTypesFromKeyParams,
  GetDetectorDetectorCommentsCountFromKeyParams,
  GetDetectorDetectorCommentsFromKeyParams,
  GetDetectorFromKeyParams,
  GetDetectorParams,
  GetDeviceActiveDevicesByLocationFromLocationIdParams,
  GetDeviceActiveDevicesCountParams,
  GetDeviceConfigurationCountParams,
  GetDeviceConfigurationDevicesCountFromKeyParams,
  GetDeviceConfigurationDevicesFromKeyParams,
  GetDeviceConfigurationEventLogDecodersParams,
  GetDeviceConfigurationFromKeyParams,
  GetDeviceConfigurationParams,
  GetDeviceCountParams,
  GetDeviceFromKeyParams,
  GetDeviceParams,
  GetDirectionTypeApproachesCountFromKeyParams,
  GetDirectionTypeApproachesFromKeyParams,
  GetDirectionTypeCountParams,
  GetDirectionTypeFromKeyParams,
  GetDirectionTypeOpposingDirectionsCountFromKeyParams,
  GetDirectionTypeOpposingDirectionsFromKeyParams,
  GetDirectionTypeParams,
  GetDirectionTypePrimaryDirectionsCountFromKeyParams,
  GetDirectionTypePrimaryDirectionsFromKeyParams,
  GetFaqCountParams,
  GetFaqFromKeyParams,
  GetFaqParams,
  GetJurisdictionCountParams,
  GetJurisdictionFromKeyParams,
  GetJurisdictionLocationsCountFromKeyParams,
  GetJurisdictionLocationsFromKeyParams,
  GetJurisdictionParams,
  GetLocationAllVersionsOfLocationFromIdentifierParams,
  GetLocationApproachesCountFromKeyParams,
  GetLocationApproachesFromKeyParams,
  GetLocationAreasCountFromKeyParams,
  GetLocationAreasFromKeyParams,
  GetLocationCopyLocationToNewVersionFromKeyParams,
  GetLocationCountParams,
  GetLocationDetectionTypeCountParams,
  GetLocationDevicesCountFromKeyParams,
  GetLocationDevicesFromKeyParams,
  GetLocationFromKeyParams,
  GetLocationLatestVersionOfAllLocationsParams,
  GetLocationLatestVersionOfLocationFromIdentifierParams,
  GetLocationLocationsForSearchParams,
  GetLocationParams,
  GetLocationTypeCountParams,
  GetLocationTypeFromKeyParams,
  GetLocationTypeLocationsCountFromKeyParams,
  GetLocationTypeLocationsFromKeyParams,
  GetLocationTypeParams,
  GetMeasureCommentCountParams,
  GetMeasureCommentFromKeyParams,
  GetMeasureCommentMeasureTypesCountFromKeyParams,
  GetMeasureCommentMeasureTypesFromKeyParams,
  GetMeasureCommentParams,
  GetMeasureOptionCountParams,
  GetMeasureOptionFromKeyParams,
  GetMeasureOptionParams,
  GetMeasureTypeCountParams,
  GetMeasureTypeDetectionTypesCountFromKeyParams,
  GetMeasureTypeDetectionTypesFromKeyParams,
  GetMeasureTypeFromKeyParams,
  GetMeasureTypeMeasureCommentsCountFromKeyParams,
  GetMeasureTypeMeasureCommentsFromKeyParams,
  GetMeasureTypeParams,
  GetMenuItemsCountParams,
  GetMenuItemsFromKeyParams,
  GetMenuItemsParams,
  GetProductCountParams,
  GetProductFromKeyParams,
  GetProductParams,
  GetRegionCountParams,
  GetRegionFromKeyParams,
  GetRegionLocationsCountFromKeyParams,
  GetRegionLocationsFromKeyParams,
  GetRegionParams,
  GetRouteCountParams,
  GetRouteDistanceCountParams,
  GetRouteDistanceFromKeyParams,
  GetRouteDistanceNextLocationsCountFromKeyParams,
  GetRouteDistanceNextLocationsFromKeyParams,
  GetRouteDistanceParams,
  GetRouteDistancePreviousLocationsCountFromKeyParams,
  GetRouteDistancePreviousLocationsFromKeyParams,
  GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams,
  GetRouteFromKeyParams,
  GetRouteLocationCountParams,
  GetRouteLocationFromKeyParams,
  GetRouteLocationParams,
  GetRouteParams,
  GetRouteRouteLocationsCountFromKeyParams,
  GetRouteRouteLocationsFromKeyParams,
  GetRouteRouteViewFromIdParams,
  GetVersionHistoryCountParams,
  GetVersionHistoryFromKeyParams,
  GetVersionHistoryParams,
  GetWatchDogIgnoreEventCountParams,
  GetWatchDogIgnoreEventFromKeyParams,
  GetWatchDogIgnoreEventParams,
  Jurisdiction,
  Location,
  LocationType,
  MeasureComment,
  MeasureOption,
  MeasureType,
  MenuItem,
  PatchApproachFromKeyParams,
  PatchAreaFromKeyParams,
  PatchDetectionTypeFromKeyParams,
  PatchDetectorCommentFromKeyParams,
  PatchDetectorFromKeyParams,
  PatchDeviceConfigurationFromKeyParams,
  PatchDeviceFromKeyParams,
  PatchDirectionTypeFromKeyParams,
  PatchFaqFromKeyParams,
  PatchJurisdictionFromKeyParams,
  PatchLocationFromKeyParams,
  PatchLocationTypeFromKeyParams,
  PatchMeasureCommentFromKeyParams,
  PatchMeasureOptionFromKeyParams,
  PatchMeasureTypeFromKeyParams,
  PatchMenuItemsFromKeyParams,
  PatchProductFromKeyParams,
  PatchRegionFromKeyParams,
  PatchRouteDistanceFromKeyParams,
  PatchRouteFromKeyParams,
  PatchRouteLocationFromKeyParams,
  PatchVersionHistoryFromKeyParams,
  PatchWatchDogIgnoreEventFromKeyParams,
  PostApproachParams,
  PostAreaParams,
  PostDetectionTypeParams,
  PostDetectorCommentParams,
  PostDetectorParams,
  PostDeviceConfigurationParams,
  PostDeviceParams,
  PostDirectionTypeParams,
  PostFaqParams,
  PostJurisdictionParams,
  PostLocationParams,
  PostLocationTypeParams,
  PostMeasureCommentParams,
  PostMeasureOptionParams,
  PostMeasureTypeParams,
  PostMenuItemsParams,
  PostProductParams,
  PostRegionParams,
  PostRouteDistanceParams,
  PostRouteLocationParams,
  PostRouteParams,
  PostVersionHistoryParams,
  PostWatchDogIgnoreEventParams,
  Product,
  PutApproachFromKeyParams,
  PutAreaFromKeyParams,
  PutDetectionTypeFromKeyParams,
  PutDetectorCommentFromKeyParams,
  PutDetectorFromKeyParams,
  PutDeviceConfigurationFromKeyParams,
  PutDeviceFromKeyParams,
  PutDirectionTypeFromKeyParams,
  PutFaqFromKeyParams,
  PutJurisdictionFromKeyParams,
  PutLocationFromKeyParams,
  PutLocationTypeFromKeyParams,
  PutMeasureCommentFromKeyParams,
  PutMeasureOptionFromKeyParams,
  PutMeasureTypeFromKeyParams,
  PutMenuItemsFromKeyParams,
  PutProductFromKeyParams,
  PutRegionFromKeyParams,
  PutRouteDistanceFromKeyParams,
  PutRouteFromKeyParams,
  PutRouteLocationFromKeyParams,
  PutVersionHistoryFromKeyParams,
  PutWatchDogIgnoreEventFromKeyParams,
  Region,
  Route,
  RouteDistance,
  RouteDto,
  RouteLocation,
  SearchLocation,
  UpsertApproachApproachParams,
  UpsertRouteRouteParams,
  VersionHistory,
  WatchDogIgnoreEvent,
} from './aTSPMConfigurationApi.schemas'

/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const getApproachDetectorsFromKey = (
  key: number,
  params?: GetApproachDetectorsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Detector[]>({
    url: `/Approach/${key}/detectors`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetApproachDetectorsFromKeyQueryKey = (
  key: number,
  params?: GetApproachDetectorsFromKeyParams
) => {
  return [`/Approach/${key}/detectors`, ...(params ? [params] : [])] as const
}

export const getGetApproachDetectorsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getApproachDetectorsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetApproachDetectorsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproachDetectorsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetApproachDetectorsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApproachDetectorsFromKey>>
  > = ({ signal }) => getApproachDetectorsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApproachDetectorsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApproachDetectorsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApproachDetectorsFromKey>>
>
export type GetApproachDetectorsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const useGetApproachDetectorsFromKey = <
  TData = Awaited<ReturnType<typeof getApproachDetectorsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetApproachDetectorsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproachDetectorsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApproachDetectorsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const getApproachDetectorsCountFromKey = (
  key: number,
  params?: GetApproachDetectorsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Detector[]>({
    url: `/Approach/${key}/detectors/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetApproachDetectorsCountFromKeyQueryKey = (
  key: number,
  params?: GetApproachDetectorsCountFromKeyParams
) => {
  return [
    `/Approach/${key}/detectors/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetApproachDetectorsCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetApproachDetectorsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetApproachDetectorsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>
  > = ({ signal }) => getApproachDetectorsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApproachDetectorsCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>
>
export type GetApproachDetectorsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const useGetApproachDetectorsCountFromKey = <
  TData = Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetApproachDetectorsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproachDetectorsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApproachDetectorsCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const upsertApproachApproach = (
  approachDto: ApproachDto,
  params?: UpsertApproachApproachParams
) => {
  return configRequest<void>({
    url: `/UpsertApproach`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: approachDto,
    params,
  })
}

export const getUpsertApproachApproachMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof upsertApproachApproach>>,
    TError,
    { data: ApproachDto; params?: UpsertApproachApproachParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof upsertApproachApproach>>,
  TError,
  { data: ApproachDto; params?: UpsertApproachApproachParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof upsertApproachApproach>>,
    { data: ApproachDto; params?: UpsertApproachApproachParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return upsertApproachApproach(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpsertApproachApproachMutationResult = NonNullable<
  Awaited<ReturnType<typeof upsertApproachApproach>>
>
export type UpsertApproachApproachMutationBody = ApproachDto
export type UpsertApproachApproachMutationError = unknown

export const useUpsertApproachApproach = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof upsertApproachApproach>>,
    TError,
    { data: ApproachDto; params?: UpsertApproachApproachParams },
    TContext
  >
}) => {
  const mutationOptions = getUpsertApproachApproachMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getApproachApproachDtoFromId = (
  id: number,
  params?: GetApproachApproachDtoFromIdParams,
  signal?: AbortSignal
) => {
  return configRequest<void>({
    url: `/GetApproachDto/${id}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetApproachApproachDtoFromIdQueryKey = (
  id: number,
  params?: GetApproachApproachDtoFromIdParams
) => {
  return [`/GetApproachDto/${id}`, ...(params ? [params] : [])] as const
}

export const getGetApproachApproachDtoFromIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApproachApproachDtoFromId>>,
  TError = unknown,
>(
  id: number,
  params?: GetApproachApproachDtoFromIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproachApproachDtoFromId>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetApproachApproachDtoFromIdQueryKey(id, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApproachApproachDtoFromId>>
  > = ({ signal }) => getApproachApproachDtoFromId(id, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApproachApproachDtoFromId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApproachApproachDtoFromIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApproachApproachDtoFromId>>
>
export type GetApproachApproachDtoFromIdQueryError = unknown

export const useGetApproachApproachDtoFromId = <
  TData = Awaited<ReturnType<typeof getApproachApproachDtoFromId>>,
  TError = unknown,
>(
  id: number,
  params?: GetApproachApproachDtoFromIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproachApproachDtoFromId>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApproachApproachDtoFromIdQueryOptions(
    id,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postApproach = (
  approach: Approach,
  params?: PostApproachParams
) => {
  return configRequest<void>({
    url: `/Approach`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: approach,
    params,
  })
}

export const getPostApproachMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApproach>>,
    TError,
    { data: Approach; params?: PostApproachParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApproach>>,
  TError,
  { data: Approach; params?: PostApproachParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApproach>>,
    { data: Approach; params?: PostApproachParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postApproach(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApproachMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApproach>>
>
export type PostApproachMutationBody = Approach
export type PostApproachMutationError = unknown

export const usePostApproach = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApproach>>,
    TError,
    { data: Approach; params?: PostApproachParams },
    TContext
  >
}) => {
  const mutationOptions = getPostApproachMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getApproach = (
  params?: GetApproachParams,
  signal?: AbortSignal
) => {
  return configRequest<Approach[]>({
    url: `/Approach`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetApproachQueryKey = (params?: GetApproachParams) => {
  return [`/Approach`, ...(params ? [params] : [])] as const
}

export const getGetApproachQueryOptions = <
  TData = Awaited<ReturnType<typeof getApproach>>,
  TError = void,
>(
  params?: GetApproachParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproach>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApproachQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApproach>>> = ({
    signal,
  }) => getApproach(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApproach>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApproachQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApproach>>
>
export type GetApproachQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetApproach = <
  TData = Awaited<ReturnType<typeof getApproach>>,
  TError = void,
>(
  params?: GetApproachParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproach>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApproachQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const patchApproachFromKey = (
  key: number,
  approach: Approach,
  params?: PatchApproachFromKeyParams
) => {
  return configRequest<void>({
    url: `/Approach/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: approach,
    params,
  })
}

export const getPatchApproachFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApproachFromKey>>,
    TError,
    { key: number; data: Approach; params?: PatchApproachFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApproachFromKey>>,
  TError,
  { key: number; data: Approach; params?: PatchApproachFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApproachFromKey>>,
    { key: number; data: Approach; params?: PatchApproachFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchApproachFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchApproachFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApproachFromKey>>
>
export type PatchApproachFromKeyMutationBody = Approach
export type PatchApproachFromKeyMutationError = unknown

export const usePatchApproachFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApproachFromKey>>,
    TError,
    { key: number; data: Approach; params?: PatchApproachFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchApproachFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

export const deleteApproachFromKey = (key: number) => {
  return configRequest<void>({
    url: `/Approach/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteApproachFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApproachFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApproachFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApproachFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteApproachFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteApproachFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApproachFromKey>>
>

export type DeleteApproachFromKeyMutationError = unknown

export const useDeleteApproachFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApproachFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteApproachFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary object with key from oData query.
 */
export const getApproachFromKey = (
  key: number,
  params?: GetApproachFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Approach>({
    url: `/Approach/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetApproachFromKeyQueryKey = (
  key: number,
  params?: GetApproachFromKeyParams
) => {
  return [`/Approach/${key}`, ...(params ? [params] : [])] as const
}

export const getGetApproachFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getApproachFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetApproachFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproachFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetApproachFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApproachFromKey>>
  > = ({ signal }) => getApproachFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApproachFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApproachFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApproachFromKey>>
>
export type GetApproachFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetApproachFromKey = <
  TData = Awaited<ReturnType<typeof getApproachFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetApproachFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproachFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApproachFromKeyQueryOptions(key, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putApproachFromKey = (
  key: number,
  approach: Approach,
  params?: PutApproachFromKeyParams
) => {
  return configRequest<void>({
    url: `/Approach/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: approach,
    params,
  })
}

export const getPutApproachFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApproachFromKey>>,
    TError,
    { key: number; data: Approach; params?: PutApproachFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApproachFromKey>>,
  TError,
  { key: number; data: Approach; params?: PutApproachFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApproachFromKey>>,
    { key: number; data: Approach; params?: PutApproachFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putApproachFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutApproachFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApproachFromKey>>
>
export type PutApproachFromKeyMutationBody = Approach
export type PutApproachFromKeyMutationError = unknown

export const usePutApproachFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApproachFromKey>>,
    TError,
    { key: number; data: Approach; params?: PutApproachFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutApproachFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getApproachCount = (
  params?: GetApproachCountParams,
  signal?: AbortSignal
) => {
  return configRequest<Approach[]>({
    url: `/Approach/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetApproachCountQueryKey = (
  params?: GetApproachCountParams
) => {
  return [`/Approach/$count`, ...(params ? [params] : [])] as const
}

export const getGetApproachCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getApproachCount>>,
  TError = void,
>(
  params?: GetApproachCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproachCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApproachCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApproachCount>>
  > = ({ signal }) => getApproachCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApproachCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApproachCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApproachCount>>
>
export type GetApproachCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetApproachCount = <
  TData = Awaited<ReturnType<typeof getApproachCount>>,
  TError = void,
>(
  params?: GetApproachCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApproachCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApproachCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getAreaLocationsFromKey = (
  key: number,
  params?: GetAreaLocationsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/Area/${key}/locations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetAreaLocationsFromKeyQueryKey = (
  key: number,
  params?: GetAreaLocationsFromKeyParams
) => {
  return [`/Area/${key}/locations`, ...(params ? [params] : [])] as const
}

export const getGetAreaLocationsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getAreaLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetAreaLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAreaLocationsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetAreaLocationsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAreaLocationsFromKey>>
  > = ({ signal }) => getAreaLocationsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAreaLocationsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAreaLocationsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAreaLocationsFromKey>>
>
export type GetAreaLocationsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const useGetAreaLocationsFromKey = <
  TData = Awaited<ReturnType<typeof getAreaLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetAreaLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAreaLocationsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAreaLocationsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getAreaLocationsCountFromKey = (
  key: number,
  params?: GetAreaLocationsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/Area/${key}/locations/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetAreaLocationsCountFromKeyQueryKey = (
  key: number,
  params?: GetAreaLocationsCountFromKeyParams
) => {
  return [`/Area/${key}/locations/$count`, ...(params ? [params] : [])] as const
}

export const getGetAreaLocationsCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetAreaLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetAreaLocationsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>
  > = ({ signal }) => getAreaLocationsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAreaLocationsCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>
>
export type GetAreaLocationsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const useGetAreaLocationsCountFromKey = <
  TData = Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetAreaLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAreaLocationsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAreaLocationsCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postArea = (area: Area, params?: PostAreaParams) => {
  return configRequest<void>({
    url: `/Area`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: area,
    params,
  })
}

export const getPostAreaMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postArea>>,
    TError,
    { data: Area; params?: PostAreaParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postArea>>,
  TError,
  { data: Area; params?: PostAreaParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postArea>>,
    { data: Area; params?: PostAreaParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postArea(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostAreaMutationResult = NonNullable<
  Awaited<ReturnType<typeof postArea>>
>
export type PostAreaMutationBody = Area
export type PostAreaMutationError = unknown

export const usePostArea = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postArea>>,
    TError,
    { data: Area; params?: PostAreaParams },
    TContext
  >
}) => {
  const mutationOptions = getPostAreaMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getArea = (params?: GetAreaParams, signal?: AbortSignal) => {
  return configRequest<Area[]>({
    url: `/Area`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetAreaQueryKey = (params?: GetAreaParams) => {
  return [`/Area`, ...(params ? [params] : [])] as const
}

export const getGetAreaQueryOptions = <
  TData = Awaited<ReturnType<typeof getArea>>,
  TError = void,
>(
  params?: GetAreaParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData>
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetAreaQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArea>>> = ({
    signal,
  }) => getArea(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getArea>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAreaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getArea>>
>
export type GetAreaQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetArea = <
  TData = Awaited<ReturnType<typeof getArea>>,
  TError = void,
>(
  params?: GetAreaParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAreaQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const patchAreaFromKey = (
  key: number,
  area: Area,
  params?: PatchAreaFromKeyParams
) => {
  return configRequest<void>({
    url: `/Area/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: area,
    params,
  })
}

export const getPatchAreaFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchAreaFromKey>>,
    TError,
    { key: number; data: Area; params?: PatchAreaFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchAreaFromKey>>,
  TError,
  { key: number; data: Area; params?: PatchAreaFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchAreaFromKey>>,
    { key: number; data: Area; params?: PatchAreaFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchAreaFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchAreaFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchAreaFromKey>>
>
export type PatchAreaFromKeyMutationBody = Area
export type PatchAreaFromKeyMutationError = unknown

export const usePatchAreaFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchAreaFromKey>>,
    TError,
    { key: number; data: Area; params?: PatchAreaFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchAreaFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

export const deleteAreaFromKey = (key: number) => {
  return configRequest<void>({ url: `/Area/${key}`, method: 'DELETE' })
}

export const getDeleteAreaFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAreaFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAreaFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAreaFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteAreaFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteAreaFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAreaFromKey>>
>

export type DeleteAreaFromKeyMutationError = unknown

export const useDeleteAreaFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAreaFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteAreaFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary object with key from oData query.
 */
export const getAreaFromKey = (
  key: number,
  params?: GetAreaFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Area>({
    url: `/Area/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetAreaFromKeyQueryKey = (
  key: number,
  params?: GetAreaFromKeyParams
) => {
  return [`/Area/${key}`, ...(params ? [params] : [])] as const
}

export const getGetAreaFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getAreaFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetAreaFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAreaFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetAreaFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAreaFromKey>>> = ({
    signal,
  }) => getAreaFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAreaFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAreaFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAreaFromKey>>
>
export type GetAreaFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetAreaFromKey = <
  TData = Awaited<ReturnType<typeof getAreaFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetAreaFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAreaFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAreaFromKeyQueryOptions(key, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putAreaFromKey = (
  key: number,
  area: Area,
  params?: PutAreaFromKeyParams
) => {
  return configRequest<void>({
    url: `/Area/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: area,
    params,
  })
}

export const getPutAreaFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAreaFromKey>>,
    TError,
    { key: number; data: Area; params?: PutAreaFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putAreaFromKey>>,
  TError,
  { key: number; data: Area; params?: PutAreaFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putAreaFromKey>>,
    { key: number; data: Area; params?: PutAreaFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putAreaFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutAreaFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putAreaFromKey>>
>
export type PutAreaFromKeyMutationBody = Area
export type PutAreaFromKeyMutationError = unknown

export const usePutAreaFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAreaFromKey>>,
    TError,
    { key: number; data: Area; params?: PutAreaFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutAreaFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getAreaCount = (
  params?: GetAreaCountParams,
  signal?: AbortSignal
) => {
  return configRequest<Area[]>({
    url: `/Area/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetAreaCountQueryKey = (params?: GetAreaCountParams) => {
  return [`/Area/$count`, ...(params ? [params] : [])] as const
}

export const getGetAreaCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getAreaCount>>,
  TError = void,
>(
  params?: GetAreaCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAreaCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetAreaCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAreaCount>>> = ({
    signal,
  }) => getAreaCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAreaCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAreaCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAreaCount>>
>
export type GetAreaCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetAreaCount = <
  TData = Awaited<ReturnType<typeof getAreaCount>>,
  TError = void,
>(
  params?: GetAreaCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAreaCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAreaCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const getDetectionTypeDetectorsFromKey = (
  key: number,
  params?: GetDetectionTypeDetectorsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Detector[]>({
    url: `/DetectionType/${key}/detectors`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectionTypeDetectorsFromKeyQueryKey = (
  key: number,
  params?: GetDetectionTypeDetectorsFromKeyParams
) => {
  return [
    `/DetectionType/${key}/detectors`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDetectionTypeDetectorsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectionTypeDetectorsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDetectionTypeDetectorsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>
  > = ({ signal }) => getDetectionTypeDetectorsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectionTypeDetectorsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>
>
export type GetDetectionTypeDetectorsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const useGetDetectionTypeDetectorsFromKey = <
  TData = Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectionTypeDetectorsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeDetectorsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectionTypeDetectorsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const getDetectionTypeDetectorsCountFromKey = (
  key: number,
  params?: GetDetectionTypeDetectorsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Detector[]>({
    url: `/DetectionType/${key}/detectors/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectionTypeDetectorsCountFromKeyQueryKey = (
  key: number,
  params?: GetDetectionTypeDetectorsCountFromKeyParams
) => {
  return [
    `/DetectionType/${key}/detectors/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDetectionTypeDetectorsCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectionTypeDetectorsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDetectionTypeDetectorsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>
  > = ({ signal }) => getDetectionTypeDetectorsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectionTypeDetectorsCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>
>
export type GetDetectionTypeDetectorsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const useGetDetectionTypeDetectorsCountFromKey = <
  TData = Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectionTypeDetectorsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeDetectorsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectionTypeDetectorsCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const getDetectionTypeMeasureTypesFromKey = (
  key: number,
  params?: GetDetectionTypeMeasureTypesFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureType[]>({
    url: `/DetectionType/${key}/measureTypes`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectionTypeMeasureTypesFromKeyQueryKey = (
  key: number,
  params?: GetDetectionTypeMeasureTypesFromKeyParams
) => {
  return [
    `/DetectionType/${key}/measureTypes`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDetectionTypeMeasureTypesFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectionTypeMeasureTypesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDetectionTypeMeasureTypesFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>
  > = ({ signal }) => getDetectionTypeMeasureTypesFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectionTypeMeasureTypesFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>
>
export type GetDetectionTypeMeasureTypesFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const useGetDetectionTypeMeasureTypesFromKey = <
  TData = Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectionTypeMeasureTypesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeMeasureTypesFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectionTypeMeasureTypesFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const getDetectionTypeMeasureTypesCountFromKey = (
  key: number,
  params?: GetDetectionTypeMeasureTypesCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureType[]>({
    url: `/DetectionType/${key}/measureTypes/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectionTypeMeasureTypesCountFromKeyQueryKey = (
  key: number,
  params?: GetDetectionTypeMeasureTypesCountFromKeyParams
) => {
  return [
    `/DetectionType/${key}/measureTypes/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDetectionTypeMeasureTypesCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectionTypeMeasureTypesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDetectionTypeMeasureTypesCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>
  > = ({ signal }) =>
    getDetectionTypeMeasureTypesCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectionTypeMeasureTypesCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>
>
export type GetDetectionTypeMeasureTypesCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const useGetDetectionTypeMeasureTypesCountFromKey = <
  TData = Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectionTypeMeasureTypesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeMeasureTypesCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectionTypeMeasureTypesCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDetectionType = (
  params?: GetDetectionTypeParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectionType[]>({
    url: `/DetectionType`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectionTypeQueryKey = (
  params?: GetDetectionTypeParams
) => {
  return [`/DetectionType`, ...(params ? [params] : [])] as const
}

export const getGetDetectionTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectionType>>,
  TError = void,
>(
  params?: GetDetectionTypeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionType>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetDetectionTypeQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectionType>>
  > = ({ signal }) => getDetectionType(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectionType>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectionTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectionType>>
>
export type GetDetectionTypeQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDetectionType = <
  TData = Awaited<ReturnType<typeof getDetectionType>>,
  TError = void,
>(
  params?: GetDetectionTypeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionType>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectionTypeQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postDetectionType = (
  detectionType: DetectionType,
  params?: PostDetectionTypeParams
) => {
  return configRequest<void>({
    url: `/DetectionType`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: detectionType,
    params,
  })
}

export const getPostDetectionTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDetectionType>>,
    TError,
    { data: DetectionType; params?: PostDetectionTypeParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDetectionType>>,
  TError,
  { data: DetectionType; params?: PostDetectionTypeParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDetectionType>>,
    { data: DetectionType; params?: PostDetectionTypeParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postDetectionType(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostDetectionTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDetectionType>>
>
export type PostDetectionTypeMutationBody = DetectionType
export type PostDetectionTypeMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostDetectionType = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDetectionType>>,
    TError,
    { data: DetectionType; params?: PostDetectionTypeParams },
    TContext
  >
}) => {
  const mutationOptions = getPostDetectionTypeMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDetectionTypeCount = (
  params?: GetDetectionTypeCountParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectionType[]>({
    url: `/DetectionType/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectionTypeCountQueryKey = (
  params?: GetDetectionTypeCountParams
) => {
  return [`/DetectionType/$count`, ...(params ? [params] : [])] as const
}

export const getGetDetectionTypeCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectionTypeCount>>,
  TError = void,
>(
  params?: GetDetectionTypeCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDetectionTypeCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectionTypeCount>>
  > = ({ signal }) => getDetectionTypeCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectionTypeCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectionTypeCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectionTypeCount>>
>
export type GetDetectionTypeCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDetectionTypeCount = <
  TData = Awaited<ReturnType<typeof getDetectionTypeCount>>,
  TError = void,
>(
  params?: GetDetectionTypeCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectionTypeCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getDetectionTypeFromKey = (
  key: string,
  params?: GetDetectionTypeFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectionType>({
    url: `/DetectionType/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectionTypeFromKeyQueryKey = (
  key: string,
  params?: GetDetectionTypeFromKeyParams
) => {
  return [`/DetectionType/${key}`, ...(params ? [params] : [])] as const
}

export const getGetDetectionTypeFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectionTypeFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDetectionTypeFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDetectionTypeFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectionTypeFromKey>>
  > = ({ signal }) => getDetectionTypeFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectionTypeFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectionTypeFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectionTypeFromKey>>
>
export type GetDetectionTypeFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetDetectionTypeFromKey = <
  TData = Awaited<ReturnType<typeof getDetectionTypeFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDetectionTypeFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectionTypeFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectionTypeFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putDetectionTypeFromKey = (
  key: string,
  detectionType: DetectionType,
  params?: PutDetectionTypeFromKeyParams
) => {
  return configRequest<void>({
    url: `/DetectionType/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: detectionType,
    params,
  })
}

export const getPutDetectionTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDetectionTypeFromKey>>,
    TError,
    {
      key: string
      data: DetectionType
      params?: PutDetectionTypeFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDetectionTypeFromKey>>,
  TError,
  { key: string; data: DetectionType; params?: PutDetectionTypeFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDetectionTypeFromKey>>,
    { key: string; data: DetectionType; params?: PutDetectionTypeFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putDetectionTypeFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutDetectionTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDetectionTypeFromKey>>
>
export type PutDetectionTypeFromKeyMutationBody = DetectionType
export type PutDetectionTypeFromKeyMutationError = unknown

export const usePutDetectionTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDetectionTypeFromKey>>,
    TError,
    {
      key: string
      data: DetectionType
      params?: PutDetectionTypeFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPutDetectionTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchDetectionTypeFromKey = (
  key: string,
  detectionType: DetectionType,
  params?: PatchDetectionTypeFromKeyParams
) => {
  return configRequest<void>({
    url: `/DetectionType/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: detectionType,
    params,
  })
}

export const getPatchDetectionTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDetectionTypeFromKey>>,
    TError,
    {
      key: string
      data: DetectionType
      params?: PatchDetectionTypeFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchDetectionTypeFromKey>>,
  TError,
  {
    key: string
    data: DetectionType
    params?: PatchDetectionTypeFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchDetectionTypeFromKey>>,
    {
      key: string
      data: DetectionType
      params?: PatchDetectionTypeFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchDetectionTypeFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchDetectionTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchDetectionTypeFromKey>>
>
export type PatchDetectionTypeFromKeyMutationBody = DetectionType
export type PatchDetectionTypeFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchDetectionTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDetectionTypeFromKey>>,
    TError,
    {
      key: string
      data: DetectionType
      params?: PatchDetectionTypeFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPatchDetectionTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteDetectionTypeFromKey = (key: string) => {
  return configRequest<void>({
    url: `/DetectionType/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteDetectionTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>,
    TError,
    { key: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>,
  TError,
  { key: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>,
    { key: string }
  > = (props) => {
    const { key } = props ?? {}

    return deleteDetectionTypeFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDetectionTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>
>

export type DeleteDetectionTypeFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteDetectionTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDetectionTypeFromKey>>,
    TError,
    { key: string },
    TContext
  >
}) => {
  const mutationOptions = getDeleteDetectionTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */
export const getDetectorDetectorCommentsFromKey = (
  key: number,
  params?: GetDetectorDetectorCommentsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectorComment[]>({
    url: `/Detector/${key}/detectorComments`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectorDetectorCommentsFromKeyQueryKey = (
  key: number,
  params?: GetDetectorDetectorCommentsFromKeyParams
) => {
  return [
    `/Detector/${key}/detectorComments`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDetectorDetectorCommentsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorDetectorCommentsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDetectorDetectorCommentsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>
  > = ({ signal }) => getDetectorDetectorCommentsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectorDetectorCommentsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>
>
export type GetDetectorDetectorCommentsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */
export const useGetDetectorDetectorCommentsFromKey = <
  TData = Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorDetectorCommentsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorDetectorCommentsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectorDetectorCommentsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */
export const getDetectorDetectorCommentsCountFromKey = (
  key: number,
  params?: GetDetectorDetectorCommentsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectorComment[]>({
    url: `/Detector/${key}/detectorComments/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectorDetectorCommentsCountFromKeyQueryKey = (
  key: number,
  params?: GetDetectorDetectorCommentsCountFromKeyParams
) => {
  return [
    `/Detector/${key}/detectorComments/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDetectorDetectorCommentsCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorDetectorCommentsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDetectorDetectorCommentsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>
  > = ({ signal }) =>
    getDetectorDetectorCommentsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectorDetectorCommentsCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>
>
export type GetDetectorDetectorCommentsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */
export const useGetDetectorDetectorCommentsCountFromKey = <
  TData = Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorDetectorCommentsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorDetectorCommentsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectorDetectorCommentsCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const getDetectorDetectionTypesFromKey = (
  key: number,
  params?: GetDetectorDetectionTypesFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectionType[]>({
    url: `/Detector/${key}/detectionTypes`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectorDetectionTypesFromKeyQueryKey = (
  key: number,
  params?: GetDetectorDetectionTypesFromKeyParams
) => {
  return [
    `/Detector/${key}/detectionTypes`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDetectorDetectionTypesFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorDetectionTypesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDetectorDetectionTypesFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>
  > = ({ signal }) => getDetectorDetectionTypesFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectorDetectionTypesFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>
>
export type GetDetectorDetectionTypesFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const useGetDetectorDetectionTypesFromKey = <
  TData = Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorDetectionTypesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorDetectionTypesFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectorDetectionTypesFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const getDetectorDetectionTypesCountFromKey = (
  key: number,
  params?: GetDetectorDetectionTypesCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectionType[]>({
    url: `/Detector/${key}/detectionTypes/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectorDetectionTypesCountFromKeyQueryKey = (
  key: number,
  params?: GetDetectorDetectionTypesCountFromKeyParams
) => {
  return [
    `/Detector/${key}/detectionTypes/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDetectorDetectionTypesCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorDetectionTypesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDetectorDetectionTypesCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>
  > = ({ signal }) => getDetectorDetectionTypesCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectorDetectionTypesCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>
>
export type GetDetectorDetectionTypesCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const useGetDetectorDetectionTypesCountFromKey = <
  TData = Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorDetectionTypesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorDetectionTypesCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectorDetectionTypesCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDetector = (
  params?: GetDetectorParams,
  signal?: AbortSignal
) => {
  return configRequest<Detector[]>({
    url: `/Detector`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectorQueryKey = (params?: GetDetectorParams) => {
  return [`/Detector`, ...(params ? [params] : [])] as const
}

export const getGetDetectorQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetector>>,
  TError = void,
>(
  params?: GetDetectorParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetector>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetDetectorQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetector>>> = ({
    signal,
  }) => getDetector(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetector>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectorQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetector>>
>
export type GetDetectorQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDetector = <
  TData = Awaited<ReturnType<typeof getDetector>>,
  TError = void,
>(
  params?: GetDetectorParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetector>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectorQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postDetector = (
  detector: Detector,
  params?: PostDetectorParams
) => {
  return configRequest<void>({
    url: `/Detector`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: detector,
    params,
  })
}

export const getPostDetectorMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDetector>>,
    TError,
    { data: Detector; params?: PostDetectorParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDetector>>,
  TError,
  { data: Detector; params?: PostDetectorParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDetector>>,
    { data: Detector; params?: PostDetectorParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postDetector(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostDetectorMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDetector>>
>
export type PostDetectorMutationBody = Detector
export type PostDetectorMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostDetector = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDetector>>,
    TError,
    { data: Detector; params?: PostDetectorParams },
    TContext
  >
}) => {
  const mutationOptions = getPostDetectorMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDetectorCount = (
  params?: GetDetectorCountParams,
  signal?: AbortSignal
) => {
  return configRequest<Detector[]>({
    url: `/Detector/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectorCountQueryKey = (
  params?: GetDetectorCountParams
) => {
  return [`/Detector/$count`, ...(params ? [params] : [])] as const
}

export const getGetDetectorCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectorCount>>,
  TError = void,
>(
  params?: GetDetectorCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetDetectorCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectorCount>>
  > = ({ signal }) => getDetectorCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectorCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectorCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectorCount>>
>
export type GetDetectorCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDetectorCount = <
  TData = Awaited<ReturnType<typeof getDetectorCount>>,
  TError = void,
>(
  params?: GetDetectorCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectorCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getDetectorFromKey = (
  key: number,
  params?: GetDetectorFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Detector>({
    url: `/Detector/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectorFromKeyQueryKey = (
  key: number,
  params?: GetDetectorFromKeyParams
) => {
  return [`/Detector/${key}`, ...(params ? [params] : [])] as const
}

export const getGetDetectorFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectorFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDetectorFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectorFromKey>>
  > = ({ signal }) => getDetectorFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectorFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectorFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectorFromKey>>
>
export type GetDetectorFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetDetectorFromKey = <
  TData = Awaited<ReturnType<typeof getDetectorFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectorFromKeyQueryOptions(key, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putDetectorFromKey = (
  key: number,
  detector: Detector,
  params?: PutDetectorFromKeyParams
) => {
  return configRequest<void>({
    url: `/Detector/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: detector,
    params,
  })
}

export const getPutDetectorFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDetectorFromKey>>,
    TError,
    { key: number; data: Detector; params?: PutDetectorFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDetectorFromKey>>,
  TError,
  { key: number; data: Detector; params?: PutDetectorFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDetectorFromKey>>,
    { key: number; data: Detector; params?: PutDetectorFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putDetectorFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutDetectorFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDetectorFromKey>>
>
export type PutDetectorFromKeyMutationBody = Detector
export type PutDetectorFromKeyMutationError = unknown

export const usePutDetectorFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDetectorFromKey>>,
    TError,
    { key: number; data: Detector; params?: PutDetectorFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutDetectorFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchDetectorFromKey = (
  key: number,
  detector: Detector,
  params?: PatchDetectorFromKeyParams
) => {
  return configRequest<void>({
    url: `/Detector/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: detector,
    params,
  })
}

export const getPatchDetectorFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDetectorFromKey>>,
    TError,
    { key: number; data: Detector; params?: PatchDetectorFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchDetectorFromKey>>,
  TError,
  { key: number; data: Detector; params?: PatchDetectorFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchDetectorFromKey>>,
    { key: number; data: Detector; params?: PatchDetectorFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchDetectorFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchDetectorFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchDetectorFromKey>>
>
export type PatchDetectorFromKeyMutationBody = Detector
export type PatchDetectorFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchDetectorFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDetectorFromKey>>,
    TError,
    { key: number; data: Detector; params?: PatchDetectorFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchDetectorFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteDetectorFromKey = (key: number) => {
  return configRequest<void>({
    url: `/Detector/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteDetectorFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDetectorFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDetectorFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDetectorFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteDetectorFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDetectorFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDetectorFromKey>>
>

export type DeleteDetectorFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteDetectorFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDetectorFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteDetectorFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDetectorComment = (
  params?: GetDetectorCommentParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectorComment[]>({
    url: `/DetectorComment`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectorCommentQueryKey = (
  params?: GetDetectorCommentParams
) => {
  return [`/DetectorComment`, ...(params ? [params] : [])] as const
}

export const getGetDetectorCommentQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectorComment>>,
  TError = void,
>(
  params?: GetDetectorCommentParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorComment>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDetectorCommentQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectorComment>>
  > = ({ signal }) => getDetectorComment(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectorComment>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectorCommentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectorComment>>
>
export type GetDetectorCommentQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDetectorComment = <
  TData = Awaited<ReturnType<typeof getDetectorComment>>,
  TError = void,
>(
  params?: GetDetectorCommentParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorComment>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectorCommentQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postDetectorComment = (
  detectorComment: DetectorComment,
  params?: PostDetectorCommentParams
) => {
  return configRequest<void>({
    url: `/DetectorComment`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: detectorComment,
    params,
  })
}

export const getPostDetectorCommentMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDetectorComment>>,
    TError,
    { data: DetectorComment; params?: PostDetectorCommentParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDetectorComment>>,
  TError,
  { data: DetectorComment; params?: PostDetectorCommentParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDetectorComment>>,
    { data: DetectorComment; params?: PostDetectorCommentParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postDetectorComment(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostDetectorCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDetectorComment>>
>
export type PostDetectorCommentMutationBody = DetectorComment
export type PostDetectorCommentMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostDetectorComment = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDetectorComment>>,
    TError,
    { data: DetectorComment; params?: PostDetectorCommentParams },
    TContext
  >
}) => {
  const mutationOptions = getPostDetectorCommentMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDetectorCommentCount = (
  params?: GetDetectorCommentCountParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectorComment[]>({
    url: `/DetectorComment/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectorCommentCountQueryKey = (
  params?: GetDetectorCommentCountParams
) => {
  return [`/DetectorComment/$count`, ...(params ? [params] : [])] as const
}

export const getGetDetectorCommentCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectorCommentCount>>,
  TError = void,
>(
  params?: GetDetectorCommentCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorCommentCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDetectorCommentCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectorCommentCount>>
  > = ({ signal }) => getDetectorCommentCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectorCommentCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectorCommentCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectorCommentCount>>
>
export type GetDetectorCommentCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDetectorCommentCount = <
  TData = Awaited<ReturnType<typeof getDetectorCommentCount>>,
  TError = void,
>(
  params?: GetDetectorCommentCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorCommentCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectorCommentCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getDetectorCommentFromKey = (
  key: number,
  params?: GetDetectorCommentFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectorComment>({
    url: `/DetectorComment/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDetectorCommentFromKeyQueryKey = (
  key: number,
  params?: GetDetectorCommentFromKeyParams
) => {
  return [`/DetectorComment/${key}`, ...(params ? [params] : [])] as const
}

export const getGetDetectorCommentFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetectorCommentFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorCommentFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorCommentFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDetectorCommentFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDetectorCommentFromKey>>
  > = ({ signal }) => getDetectorCommentFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDetectorCommentFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDetectorCommentFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDetectorCommentFromKey>>
>
export type GetDetectorCommentFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetDetectorCommentFromKey = <
  TData = Awaited<ReturnType<typeof getDetectorCommentFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDetectorCommentFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDetectorCommentFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDetectorCommentFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putDetectorCommentFromKey = (
  key: number,
  detectorComment: DetectorComment,
  params?: PutDetectorCommentFromKeyParams
) => {
  return configRequest<void>({
    url: `/DetectorComment/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: detectorComment,
    params,
  })
}

export const getPutDetectorCommentFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDetectorCommentFromKey>>,
    TError,
    {
      key: number
      data: DetectorComment
      params?: PutDetectorCommentFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDetectorCommentFromKey>>,
  TError,
  {
    key: number
    data: DetectorComment
    params?: PutDetectorCommentFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDetectorCommentFromKey>>,
    {
      key: number
      data: DetectorComment
      params?: PutDetectorCommentFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putDetectorCommentFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutDetectorCommentFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDetectorCommentFromKey>>
>
export type PutDetectorCommentFromKeyMutationBody = DetectorComment
export type PutDetectorCommentFromKeyMutationError = unknown

export const usePutDetectorCommentFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDetectorCommentFromKey>>,
    TError,
    {
      key: number
      data: DetectorComment
      params?: PutDetectorCommentFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPutDetectorCommentFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchDetectorCommentFromKey = (
  key: number,
  detectorComment: DetectorComment,
  params?: PatchDetectorCommentFromKeyParams
) => {
  return configRequest<void>({
    url: `/DetectorComment/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: detectorComment,
    params,
  })
}

export const getPatchDetectorCommentFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDetectorCommentFromKey>>,
    TError,
    {
      key: number
      data: DetectorComment
      params?: PatchDetectorCommentFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchDetectorCommentFromKey>>,
  TError,
  {
    key: number
    data: DetectorComment
    params?: PatchDetectorCommentFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchDetectorCommentFromKey>>,
    {
      key: number
      data: DetectorComment
      params?: PatchDetectorCommentFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchDetectorCommentFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchDetectorCommentFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchDetectorCommentFromKey>>
>
export type PatchDetectorCommentFromKeyMutationBody = DetectorComment
export type PatchDetectorCommentFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchDetectorCommentFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDetectorCommentFromKey>>,
    TError,
    {
      key: number
      data: DetectorComment
      params?: PatchDetectorCommentFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPatchDetectorCommentFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteDetectorCommentFromKey = (key: number) => {
  return configRequest<void>({
    url: `/DetectorComment/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteDetectorCommentFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteDetectorCommentFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDetectorCommentFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>
>

export type DeleteDetectorCommentFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteDetectorCommentFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDetectorCommentFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions =
    getDeleteDetectorCommentFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Gets all Utah.Udot.Atspm.Data.Models.Device from locationId where Utah.Udot.Atspm.Data.Models.Device.DeviceStatus equals Utah.Udot.Atspm.Data.Enums.DeviceStatus.Active
 */
export const getDeviceActiveDevicesByLocationFromLocationId = (
  locationId: number,
  params?: GetDeviceActiveDevicesByLocationFromLocationIdParams,
  signal?: AbortSignal
) => {
  return configRequest<Device[]>({
    url: `/Device/GetActiveDevicesByLocation(locationId=${locationId})`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceActiveDevicesByLocationFromLocationIdQueryKey = (
  locationId: number,
  params?: GetDeviceActiveDevicesByLocationFromLocationIdParams
) => {
  return [
    `/Device/GetActiveDevicesByLocation(locationId=${locationId})`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDeviceActiveDevicesByLocationFromLocationIdQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getDeviceActiveDevicesByLocationFromLocationId>
  >,
  TError = void,
>(
  locationId: number,
  params?: GetDeviceActiveDevicesByLocationFromLocationIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof getDeviceActiveDevicesByLocationFromLocationId>
      >,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDeviceActiveDevicesByLocationFromLocationIdQueryKey(
      locationId,
      params
    )

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeviceActiveDevicesByLocationFromLocationId>>
  > = ({ signal }) =>
    getDeviceActiveDevicesByLocationFromLocationId(locationId, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!locationId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceActiveDevicesByLocationFromLocationId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceActiveDevicesByLocationFromLocationIdQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getDeviceActiveDevicesByLocationFromLocationId>>
  >
export type GetDeviceActiveDevicesByLocationFromLocationIdQueryError = void

/**
 * @summary Gets all Utah.Udot.Atspm.Data.Models.Device from locationId where Utah.Udot.Atspm.Data.Models.Device.DeviceStatus equals Utah.Udot.Atspm.Data.Enums.DeviceStatus.Active
 */
export const useGetDeviceActiveDevicesByLocationFromLocationId = <
  TData = Awaited<
    ReturnType<typeof getDeviceActiveDevicesByLocationFromLocationId>
  >,
  TError = void,
>(
  locationId: number,
  params?: GetDeviceActiveDevicesByLocationFromLocationIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof getDeviceActiveDevicesByLocationFromLocationId>
      >,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetDeviceActiveDevicesByLocationFromLocationIdQueryOptions(
      locationId,
      params,
      options
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Gets a count of device type for all active devices Utah.Udot.Atspm.Data.Models.Device where Utah.Udot.Atspm.Data.Models.Device.DeviceStatus equals Utah.Udot.Atspm.Data.Enums.DeviceStatus.Active
 */
export const getDeviceActiveDevicesCount = (
  params?: GetDeviceActiveDevicesCountParams,
  signal?: AbortSignal
) => {
  return configRequest<DeviceGroup[]>({
    url: `/Device/GetActiveDevicesCount`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceActiveDevicesCountQueryKey = (
  params?: GetDeviceActiveDevicesCountParams
) => {
  return [`/Device/GetActiveDevicesCount`, ...(params ? [params] : [])] as const
}

export const getGetDeviceActiveDevicesCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeviceActiveDevicesCount>>,
  TError = void,
>(
  params?: GetDeviceActiveDevicesCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceActiveDevicesCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDeviceActiveDevicesCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeviceActiveDevicesCount>>
  > = ({ signal }) => getDeviceActiveDevicesCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceActiveDevicesCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceActiveDevicesCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceActiveDevicesCount>>
>
export type GetDeviceActiveDevicesCountQueryError = void

/**
 * @summary Gets a count of device type for all active devices Utah.Udot.Atspm.Data.Models.Device where Utah.Udot.Atspm.Data.Models.Device.DeviceStatus equals Utah.Udot.Atspm.Data.Enums.DeviceStatus.Active
 */
export const useGetDeviceActiveDevicesCount = <
  TData = Awaited<ReturnType<typeof getDeviceActiveDevicesCount>>,
  TError = void,
>(
  params?: GetDeviceActiveDevicesCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceActiveDevicesCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeviceActiveDevicesCountQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDevice = (params?: GetDeviceParams, signal?: AbortSignal) => {
  return configRequest<Device[]>({
    url: `/Device`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceQueryKey = (params?: GetDeviceParams) => {
  return [`/Device`, ...(params ? [params] : [])] as const
}

export const getGetDeviceQueryOptions = <
  TData = Awaited<ReturnType<typeof getDevice>>,
  TError = void,
>(
  params?: GetDeviceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDevice>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetDeviceQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDevice>>> = ({
    signal,
  }) => getDevice(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDevice>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDevice>>
>
export type GetDeviceQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDevice = <
  TData = Awaited<ReturnType<typeof getDevice>>,
  TError = void,
>(
  params?: GetDeviceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDevice>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeviceQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postDevice = (device: Device, params?: PostDeviceParams) => {
  return configRequest<void>({
    url: `/Device`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: device,
    params,
  })
}

export const getPostDeviceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDevice>>,
    TError,
    { data: Device; params?: PostDeviceParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDevice>>,
  TError,
  { data: Device; params?: PostDeviceParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDevice>>,
    { data: Device; params?: PostDeviceParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postDevice(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostDeviceMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDevice>>
>
export type PostDeviceMutationBody = Device
export type PostDeviceMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostDevice = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDevice>>,
    TError,
    { data: Device; params?: PostDeviceParams },
    TContext
  >
}) => {
  const mutationOptions = getPostDeviceMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDeviceCount = (
  params?: GetDeviceCountParams,
  signal?: AbortSignal
) => {
  return configRequest<Device[]>({
    url: `/Device/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceCountQueryKey = (params?: GetDeviceCountParams) => {
  return [`/Device/$count`, ...(params ? [params] : [])] as const
}

export const getGetDeviceCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeviceCount>>,
  TError = void,
>(
  params?: GetDeviceCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetDeviceCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeviceCount>>> = ({
    signal,
  }) => getDeviceCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceCount>>
>
export type GetDeviceCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDeviceCount = <
  TData = Awaited<ReturnType<typeof getDeviceCount>>,
  TError = void,
>(
  params?: GetDeviceCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeviceCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getDeviceFromKey = (
  key: number,
  params?: GetDeviceFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Device>({
    url: `/Device/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceFromKeyQueryKey = (
  key: number,
  params?: GetDeviceFromKeyParams
) => {
  return [`/Device/${key}`, ...(params ? [params] : [])] as const
}

export const getGetDeviceFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeviceFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDeviceFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDeviceFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeviceFromKey>>
  > = ({ signal }) => getDeviceFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceFromKey>>
>
export type GetDeviceFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetDeviceFromKey = <
  TData = Awaited<ReturnType<typeof getDeviceFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDeviceFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeviceFromKeyQueryOptions(key, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putDeviceFromKey = (
  key: number,
  device: Device,
  params?: PutDeviceFromKeyParams
) => {
  return configRequest<void>({
    url: `/Device/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: device,
    params,
  })
}

export const getPutDeviceFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDeviceFromKey>>,
    TError,
    { key: number; data: Device; params?: PutDeviceFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDeviceFromKey>>,
  TError,
  { key: number; data: Device; params?: PutDeviceFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDeviceFromKey>>,
    { key: number; data: Device; params?: PutDeviceFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putDeviceFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutDeviceFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDeviceFromKey>>
>
export type PutDeviceFromKeyMutationBody = Device
export type PutDeviceFromKeyMutationError = unknown

export const usePutDeviceFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDeviceFromKey>>,
    TError,
    { key: number; data: Device; params?: PutDeviceFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutDeviceFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchDeviceFromKey = (
  key: number,
  device: Device,
  params?: PatchDeviceFromKeyParams
) => {
  return configRequest<void>({
    url: `/Device/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: device,
    params,
  })
}

export const getPatchDeviceFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDeviceFromKey>>,
    TError,
    { key: number; data: Device; params?: PatchDeviceFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchDeviceFromKey>>,
  TError,
  { key: number; data: Device; params?: PatchDeviceFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchDeviceFromKey>>,
    { key: number; data: Device; params?: PatchDeviceFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchDeviceFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchDeviceFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchDeviceFromKey>>
>
export type PatchDeviceFromKeyMutationBody = Device
export type PatchDeviceFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchDeviceFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDeviceFromKey>>,
    TError,
    { key: number; data: Device; params?: PatchDeviceFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchDeviceFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteDeviceFromKey = (key: number) => {
  return configRequest<void>({ url: `/Device/${key}`, method: 'DELETE' })
}

export const getDeleteDeviceFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeviceFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDeviceFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDeviceFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteDeviceFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDeviceFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDeviceFromKey>>
>

export type DeleteDeviceFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteDeviceFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeviceFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteDeviceFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const getDeviceConfigurationDevicesFromKey = (
  key: number,
  params?: GetDeviceConfigurationDevicesFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Device[]>({
    url: `/DeviceConfiguration/${key}/devices`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceConfigurationDevicesFromKeyQueryKey = (
  key: number,
  params?: GetDeviceConfigurationDevicesFromKeyParams
) => {
  return [
    `/DeviceConfiguration/${key}/devices`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDeviceConfigurationDevicesFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDeviceConfigurationDevicesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDeviceConfigurationDevicesFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>
  > = ({ signal }) => getDeviceConfigurationDevicesFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceConfigurationDevicesFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>
>
export type GetDeviceConfigurationDevicesFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const useGetDeviceConfigurationDevicesFromKey = <
  TData = Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDeviceConfigurationDevicesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfigurationDevicesFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeviceConfigurationDevicesFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const getDeviceConfigurationDevicesCountFromKey = (
  key: number,
  params?: GetDeviceConfigurationDevicesCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Device[]>({
    url: `/DeviceConfiguration/${key}/devices/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceConfigurationDevicesCountFromKeyQueryKey = (
  key: number,
  params?: GetDeviceConfigurationDevicesCountFromKeyParams
) => {
  return [
    `/DeviceConfiguration/${key}/devices/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDeviceConfigurationDevicesCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDeviceConfigurationDevicesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDeviceConfigurationDevicesCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>
  > = ({ signal }) =>
    getDeviceConfigurationDevicesCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceConfigurationDevicesCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>
>
export type GetDeviceConfigurationDevicesCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const useGetDeviceConfigurationDevicesCountFromKey = <
  TData = Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDeviceConfigurationDevicesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfigurationDevicesCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeviceConfigurationDevicesCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Gets all implementations of Utah.Udot.Atspm.Services.IEventLogDecoder
that can be assigned to Utah.Udot.Atspm.Data.Models.DeviceConfiguration for decoding Utah.Udot.Atspm.Data.Models.EventLogModels.EventLogModelBase derived types.
 */
export const getDeviceConfigurationEventLogDecoders = (
  params?: GetDeviceConfigurationEventLogDecodersParams,
  signal?: AbortSignal
) => {
  return configRequest<string[]>({
    url: `/DeviceConfiguration/GetEventLogDecoders`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceConfigurationEventLogDecodersQueryKey = (
  params?: GetDeviceConfigurationEventLogDecodersParams
) => {
  return [
    `/DeviceConfiguration/GetEventLogDecoders`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDeviceConfigurationEventLogDecodersQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>,
  TError = void,
>(
  params?: GetDeviceConfigurationEventLogDecodersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDeviceConfigurationEventLogDecodersQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>
  > = ({ signal }) => getDeviceConfigurationEventLogDecoders(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceConfigurationEventLogDecodersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>
>
export type GetDeviceConfigurationEventLogDecodersQueryError = void

/**
 * @summary Gets all implementations of Utah.Udot.Atspm.Services.IEventLogDecoder
that can be assigned to Utah.Udot.Atspm.Data.Models.DeviceConfiguration for decoding Utah.Udot.Atspm.Data.Models.EventLogModels.EventLogModelBase derived types.
 */
export const useGetDeviceConfigurationEventLogDecoders = <
  TData = Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>,
  TError = void,
>(
  params?: GetDeviceConfigurationEventLogDecodersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfigurationEventLogDecoders>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeviceConfigurationEventLogDecodersQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDeviceConfiguration = (
  params?: GetDeviceConfigurationParams,
  signal?: AbortSignal
) => {
  return configRequest<DeviceConfiguration[]>({
    url: `/DeviceConfiguration`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceConfigurationQueryKey = (
  params?: GetDeviceConfigurationParams
) => {
  return [`/DeviceConfiguration`, ...(params ? [params] : [])] as const
}

export const getGetDeviceConfigurationQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeviceConfiguration>>,
  TError = void,
>(
  params?: GetDeviceConfigurationParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfiguration>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDeviceConfigurationQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeviceConfiguration>>
  > = ({ signal }) => getDeviceConfiguration(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceConfiguration>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceConfigurationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceConfiguration>>
>
export type GetDeviceConfigurationQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDeviceConfiguration = <
  TData = Awaited<ReturnType<typeof getDeviceConfiguration>>,
  TError = void,
>(
  params?: GetDeviceConfigurationParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfiguration>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeviceConfigurationQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postDeviceConfiguration = (
  deviceConfiguration: DeviceConfiguration,
  params?: PostDeviceConfigurationParams
) => {
  return configRequest<void>({
    url: `/DeviceConfiguration`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: deviceConfiguration,
    params,
  })
}

export const getPostDeviceConfigurationMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDeviceConfiguration>>,
    TError,
    { data: DeviceConfiguration; params?: PostDeviceConfigurationParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDeviceConfiguration>>,
  TError,
  { data: DeviceConfiguration; params?: PostDeviceConfigurationParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDeviceConfiguration>>,
    { data: DeviceConfiguration; params?: PostDeviceConfigurationParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postDeviceConfiguration(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostDeviceConfigurationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDeviceConfiguration>>
>
export type PostDeviceConfigurationMutationBody = DeviceConfiguration
export type PostDeviceConfigurationMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostDeviceConfiguration = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDeviceConfiguration>>,
    TError,
    { data: DeviceConfiguration; params?: PostDeviceConfigurationParams },
    TContext
  >
}) => {
  const mutationOptions = getPostDeviceConfigurationMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDeviceConfigurationCount = (
  params?: GetDeviceConfigurationCountParams,
  signal?: AbortSignal
) => {
  return configRequest<DeviceConfiguration[]>({
    url: `/DeviceConfiguration/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceConfigurationCountQueryKey = (
  params?: GetDeviceConfigurationCountParams
) => {
  return [`/DeviceConfiguration/$count`, ...(params ? [params] : [])] as const
}

export const getGetDeviceConfigurationCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeviceConfigurationCount>>,
  TError = void,
>(
  params?: GetDeviceConfigurationCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfigurationCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDeviceConfigurationCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeviceConfigurationCount>>
  > = ({ signal }) => getDeviceConfigurationCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceConfigurationCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceConfigurationCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceConfigurationCount>>
>
export type GetDeviceConfigurationCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDeviceConfigurationCount = <
  TData = Awaited<ReturnType<typeof getDeviceConfigurationCount>>,
  TError = void,
>(
  params?: GetDeviceConfigurationCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfigurationCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeviceConfigurationCountQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getDeviceConfigurationFromKey = (
  key: number,
  params?: GetDeviceConfigurationFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<DeviceConfiguration>({
    url: `/DeviceConfiguration/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDeviceConfigurationFromKeyQueryKey = (
  key: number,
  params?: GetDeviceConfigurationFromKeyParams
) => {
  return [`/DeviceConfiguration/${key}`, ...(params ? [params] : [])] as const
}

export const getGetDeviceConfigurationFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDeviceConfigurationFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDeviceConfigurationFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>
  > = ({ signal }) => getDeviceConfigurationFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDeviceConfigurationFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>
>
export type GetDeviceConfigurationFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetDeviceConfigurationFromKey = <
  TData = Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetDeviceConfigurationFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDeviceConfigurationFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeviceConfigurationFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putDeviceConfigurationFromKey = (
  key: number,
  deviceConfiguration: DeviceConfiguration,
  params?: PutDeviceConfigurationFromKeyParams
) => {
  return configRequest<void>({
    url: `/DeviceConfiguration/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: deviceConfiguration,
    params,
  })
}

export const getPutDeviceConfigurationFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>,
    TError,
    {
      key: number
      data: DeviceConfiguration
      params?: PutDeviceConfigurationFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>,
  TError,
  {
    key: number
    data: DeviceConfiguration
    params?: PutDeviceConfigurationFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>,
    {
      key: number
      data: DeviceConfiguration
      params?: PutDeviceConfigurationFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putDeviceConfigurationFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutDeviceConfigurationFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>
>
export type PutDeviceConfigurationFromKeyMutationBody = DeviceConfiguration
export type PutDeviceConfigurationFromKeyMutationError = unknown

export const usePutDeviceConfigurationFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDeviceConfigurationFromKey>>,
    TError,
    {
      key: number
      data: DeviceConfiguration
      params?: PutDeviceConfigurationFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions =
    getPutDeviceConfigurationFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchDeviceConfigurationFromKey = (
  key: number,
  deviceConfiguration: DeviceConfiguration,
  params?: PatchDeviceConfigurationFromKeyParams
) => {
  return configRequest<void>({
    url: `/DeviceConfiguration/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: deviceConfiguration,
    params,
  })
}

export const getPatchDeviceConfigurationFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>,
    TError,
    {
      key: number
      data: DeviceConfiguration
      params?: PatchDeviceConfigurationFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>,
  TError,
  {
    key: number
    data: DeviceConfiguration
    params?: PatchDeviceConfigurationFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>,
    {
      key: number
      data: DeviceConfiguration
      params?: PatchDeviceConfigurationFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchDeviceConfigurationFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchDeviceConfigurationFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>
>
export type PatchDeviceConfigurationFromKeyMutationBody = DeviceConfiguration
export type PatchDeviceConfigurationFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchDeviceConfigurationFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDeviceConfigurationFromKey>>,
    TError,
    {
      key: number
      data: DeviceConfiguration
      params?: PatchDeviceConfigurationFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions =
    getPatchDeviceConfigurationFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteDeviceConfigurationFromKey = (key: number) => {
  return configRequest<void>({
    url: `/DeviceConfiguration/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteDeviceConfigurationFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteDeviceConfigurationFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDeviceConfigurationFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>
>

export type DeleteDeviceConfigurationFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteDeviceConfigurationFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeviceConfigurationFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions =
    getDeleteDeviceConfigurationFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const getDirectionTypeApproachesFromKey = (
  key: string,
  params?: GetDirectionTypeApproachesFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Approach[]>({
    url: `/DirectionType/${key}/approaches`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDirectionTypeApproachesFromKeyQueryKey = (
  key: string,
  params?: GetDirectionTypeApproachesFromKeyParams
) => {
  return [
    `/DirectionType/${key}/approaches`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDirectionTypeApproachesFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypeApproachesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDirectionTypeApproachesFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>
  > = ({ signal }) => getDirectionTypeApproachesFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDirectionTypeApproachesFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>
>
export type GetDirectionTypeApproachesFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const useGetDirectionTypeApproachesFromKey = <
  TData = Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypeApproachesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypeApproachesFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDirectionTypeApproachesFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const getDirectionTypeApproachesCountFromKey = (
  key: string,
  params?: GetDirectionTypeApproachesCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Approach[]>({
    url: `/DirectionType/${key}/approaches/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDirectionTypeApproachesCountFromKeyQueryKey = (
  key: string,
  params?: GetDirectionTypeApproachesCountFromKeyParams
) => {
  return [
    `/DirectionType/${key}/approaches/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDirectionTypeApproachesCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypeApproachesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDirectionTypeApproachesCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>
  > = ({ signal }) =>
    getDirectionTypeApproachesCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDirectionTypeApproachesCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>
>
export type GetDirectionTypeApproachesCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const useGetDirectionTypeApproachesCountFromKey = <
  TData = Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypeApproachesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypeApproachesCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDirectionTypeApproachesCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getDirectionTypePrimaryDirectionsFromKey = (
  key: string,
  params?: GetDirectionTypePrimaryDirectionsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/DirectionType/${key}/primaryDirections`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDirectionTypePrimaryDirectionsFromKeyQueryKey = (
  key: string,
  params?: GetDirectionTypePrimaryDirectionsFromKeyParams
) => {
  return [
    `/DirectionType/${key}/primaryDirections`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDirectionTypePrimaryDirectionsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypePrimaryDirectionsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDirectionTypePrimaryDirectionsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>
  > = ({ signal }) =>
    getDirectionTypePrimaryDirectionsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDirectionTypePrimaryDirectionsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>
>
export type GetDirectionTypePrimaryDirectionsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const useGetDirectionTypePrimaryDirectionsFromKey = <
  TData = Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypePrimaryDirectionsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDirectionTypePrimaryDirectionsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getDirectionTypePrimaryDirectionsCountFromKey = (
  key: string,
  params?: GetDirectionTypePrimaryDirectionsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/DirectionType/${key}/primaryDirections/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDirectionTypePrimaryDirectionsCountFromKeyQueryKey = (
  key: string,
  params?: GetDirectionTypePrimaryDirectionsCountFromKeyParams
) => {
  return [
    `/DirectionType/${key}/primaryDirections/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDirectionTypePrimaryDirectionsCountFromKeyQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>
  >,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypePrimaryDirectionsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDirectionTypePrimaryDirectionsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>
  > = ({ signal }) =>
    getDirectionTypePrimaryDirectionsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDirectionTypePrimaryDirectionsCountFromKeyQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>
  >
export type GetDirectionTypePrimaryDirectionsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const useGetDirectionTypePrimaryDirectionsCountFromKey = <
  TData = Awaited<
    ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>
  >,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypePrimaryDirectionsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypePrimaryDirectionsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetDirectionTypePrimaryDirectionsCountFromKeyQueryOptions(
      key,
      params,
      options
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getDirectionTypeOpposingDirectionsFromKey = (
  key: string,
  params?: GetDirectionTypeOpposingDirectionsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/DirectionType/${key}/opposingDirections`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDirectionTypeOpposingDirectionsFromKeyQueryKey = (
  key: string,
  params?: GetDirectionTypeOpposingDirectionsFromKeyParams
) => {
  return [
    `/DirectionType/${key}/opposingDirections`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDirectionTypeOpposingDirectionsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypeOpposingDirectionsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDirectionTypeOpposingDirectionsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>
  > = ({ signal }) =>
    getDirectionTypeOpposingDirectionsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDirectionTypeOpposingDirectionsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>
>
export type GetDirectionTypeOpposingDirectionsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const useGetDirectionTypeOpposingDirectionsFromKey = <
  TData = Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypeOpposingDirectionsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDirectionTypeOpposingDirectionsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getDirectionTypeOpposingDirectionsCountFromKey = (
  key: string,
  params?: GetDirectionTypeOpposingDirectionsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/DirectionType/${key}/opposingDirections/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDirectionTypeOpposingDirectionsCountFromKeyQueryKey = (
  key: string,
  params?: GetDirectionTypeOpposingDirectionsCountFromKeyParams
) => {
  return [
    `/DirectionType/${key}/opposingDirections/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetDirectionTypeOpposingDirectionsCountFromKeyQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>
  >,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypeOpposingDirectionsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>
      >,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetDirectionTypeOpposingDirectionsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>>
  > = ({ signal }) =>
    getDirectionTypeOpposingDirectionsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDirectionTypeOpposingDirectionsCountFromKeyQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>>
  >
export type GetDirectionTypeOpposingDirectionsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const useGetDirectionTypeOpposingDirectionsCountFromKey = <
  TData = Awaited<
    ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>
  >,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypeOpposingDirectionsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof getDirectionTypeOpposingDirectionsCountFromKey>
      >,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetDirectionTypeOpposingDirectionsCountFromKeyQueryOptions(
      key,
      params,
      options
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDirectionType = (
  params?: GetDirectionTypeParams,
  signal?: AbortSignal
) => {
  return configRequest<DirectionType[]>({
    url: `/DirectionType`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDirectionTypeQueryKey = (
  params?: GetDirectionTypeParams
) => {
  return [`/DirectionType`, ...(params ? [params] : [])] as const
}

export const getGetDirectionTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getDirectionType>>,
  TError = void,
>(
  params?: GetDirectionTypeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionType>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetDirectionTypeQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDirectionType>>
  > = ({ signal }) => getDirectionType(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDirectionType>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDirectionTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDirectionType>>
>
export type GetDirectionTypeQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDirectionType = <
  TData = Awaited<ReturnType<typeof getDirectionType>>,
  TError = void,
>(
  params?: GetDirectionTypeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionType>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDirectionTypeQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postDirectionType = (
  directionType: DirectionType,
  params?: PostDirectionTypeParams
) => {
  return configRequest<void>({
    url: `/DirectionType`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: directionType,
    params,
  })
}

export const getPostDirectionTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDirectionType>>,
    TError,
    { data: DirectionType; params?: PostDirectionTypeParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDirectionType>>,
  TError,
  { data: DirectionType; params?: PostDirectionTypeParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDirectionType>>,
    { data: DirectionType; params?: PostDirectionTypeParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postDirectionType(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostDirectionTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDirectionType>>
>
export type PostDirectionTypeMutationBody = DirectionType
export type PostDirectionTypeMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostDirectionType = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDirectionType>>,
    TError,
    { data: DirectionType; params?: PostDirectionTypeParams },
    TContext
  >
}) => {
  const mutationOptions = getPostDirectionTypeMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getDirectionTypeCount = (
  params?: GetDirectionTypeCountParams,
  signal?: AbortSignal
) => {
  return configRequest<DirectionType[]>({
    url: `/DirectionType/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDirectionTypeCountQueryKey = (
  params?: GetDirectionTypeCountParams
) => {
  return [`/DirectionType/$count`, ...(params ? [params] : [])] as const
}

export const getGetDirectionTypeCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getDirectionTypeCount>>,
  TError = void,
>(
  params?: GetDirectionTypeCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypeCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDirectionTypeCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDirectionTypeCount>>
  > = ({ signal }) => getDirectionTypeCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDirectionTypeCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDirectionTypeCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDirectionTypeCount>>
>
export type GetDirectionTypeCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetDirectionTypeCount = <
  TData = Awaited<ReturnType<typeof getDirectionTypeCount>>,
  TError = void,
>(
  params?: GetDirectionTypeCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypeCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDirectionTypeCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getDirectionTypeFromKey = (
  key: string,
  params?: GetDirectionTypeFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<DirectionType>({
    url: `/DirectionType/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetDirectionTypeFromKeyQueryKey = (
  key: string,
  params?: GetDirectionTypeFromKeyParams
) => {
  return [`/DirectionType/${key}`, ...(params ? [params] : [])] as const
}

export const getGetDirectionTypeFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getDirectionTypeFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypeFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypeFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDirectionTypeFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDirectionTypeFromKey>>
  > = ({ signal }) => getDirectionTypeFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDirectionTypeFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDirectionTypeFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDirectionTypeFromKey>>
>
export type GetDirectionTypeFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetDirectionTypeFromKey = <
  TData = Awaited<ReturnType<typeof getDirectionTypeFromKey>>,
  TError = void,
>(
  key: string,
  params?: GetDirectionTypeFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDirectionTypeFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDirectionTypeFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putDirectionTypeFromKey = (
  key: string,
  directionType: DirectionType,
  params?: PutDirectionTypeFromKeyParams
) => {
  return configRequest<void>({
    url: `/DirectionType/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: directionType,
    params,
  })
}

export const getPutDirectionTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDirectionTypeFromKey>>,
    TError,
    {
      key: string
      data: DirectionType
      params?: PutDirectionTypeFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDirectionTypeFromKey>>,
  TError,
  { key: string; data: DirectionType; params?: PutDirectionTypeFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDirectionTypeFromKey>>,
    { key: string; data: DirectionType; params?: PutDirectionTypeFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putDirectionTypeFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutDirectionTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDirectionTypeFromKey>>
>
export type PutDirectionTypeFromKeyMutationBody = DirectionType
export type PutDirectionTypeFromKeyMutationError = unknown

export const usePutDirectionTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDirectionTypeFromKey>>,
    TError,
    {
      key: string
      data: DirectionType
      params?: PutDirectionTypeFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPutDirectionTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchDirectionTypeFromKey = (
  key: string,
  directionType: DirectionType,
  params?: PatchDirectionTypeFromKeyParams
) => {
  return configRequest<void>({
    url: `/DirectionType/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: directionType,
    params,
  })
}

export const getPatchDirectionTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDirectionTypeFromKey>>,
    TError,
    {
      key: string
      data: DirectionType
      params?: PatchDirectionTypeFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchDirectionTypeFromKey>>,
  TError,
  {
    key: string
    data: DirectionType
    params?: PatchDirectionTypeFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchDirectionTypeFromKey>>,
    {
      key: string
      data: DirectionType
      params?: PatchDirectionTypeFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchDirectionTypeFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchDirectionTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchDirectionTypeFromKey>>
>
export type PatchDirectionTypeFromKeyMutationBody = DirectionType
export type PatchDirectionTypeFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchDirectionTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchDirectionTypeFromKey>>,
    TError,
    {
      key: string
      data: DirectionType
      params?: PatchDirectionTypeFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPatchDirectionTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteDirectionTypeFromKey = (key: string) => {
  return configRequest<void>({
    url: `/DirectionType/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteDirectionTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>,
    TError,
    { key: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>,
  TError,
  { key: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>,
    { key: string }
  > = (props) => {
    const { key } = props ?? {}

    return deleteDirectionTypeFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDirectionTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>
>

export type DeleteDirectionTypeFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteDirectionTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDirectionTypeFromKey>>,
    TError,
    { key: string },
    TContext
  >
}) => {
  const mutationOptions = getDeleteDirectionTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

export const postFaq = (faq: Faq, params?: PostFaqParams) => {
  return configRequest<void>({
    url: `/Faq`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: faq,
    params,
  })
}

export const getPostFaqMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFaq>>,
    TError,
    { data: Faq; params?: PostFaqParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postFaq>>,
  TError,
  { data: Faq; params?: PostFaqParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postFaq>>,
    { data: Faq; params?: PostFaqParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postFaq(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostFaqMutationResult = NonNullable<
  Awaited<ReturnType<typeof postFaq>>
>
export type PostFaqMutationBody = Faq
export type PostFaqMutationError = unknown

export const usePostFaq = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFaq>>,
    TError,
    { data: Faq; params?: PostFaqParams },
    TContext
  >
}) => {
  const mutationOptions = getPostFaqMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getFaq = (params?: GetFaqParams, signal?: AbortSignal) => {
  return configRequest<Faq[]>({
    url: `/Faq`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetFaqQueryKey = (params?: GetFaqParams) => {
  return [`/Faq`, ...(params ? [params] : [])] as const
}

export const getGetFaqQueryOptions = <
  TData = Awaited<ReturnType<typeof getFaq>>,
  TError = void,
>(
  params?: GetFaqParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getFaq>>, TError, TData>
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetFaqQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFaq>>> = ({
    signal,
  }) => getFaq(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFaq>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetFaqQueryResult = NonNullable<Awaited<ReturnType<typeof getFaq>>>
export type GetFaqQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetFaq = <
  TData = Awaited<ReturnType<typeof getFaq>>,
  TError = void,
>(
  params?: GetFaqParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getFaq>>, TError, TData>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFaqQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const patchFaqFromKey = (
  key: number,
  faq: Faq,
  params?: PatchFaqFromKeyParams
) => {
  return configRequest<void>({
    url: `/Faq/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: faq,
    params,
  })
}

export const getPatchFaqFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchFaqFromKey>>,
    TError,
    { key: number; data: Faq; params?: PatchFaqFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchFaqFromKey>>,
  TError,
  { key: number; data: Faq; params?: PatchFaqFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchFaqFromKey>>,
    { key: number; data: Faq; params?: PatchFaqFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchFaqFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchFaqFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchFaqFromKey>>
>
export type PatchFaqFromKeyMutationBody = Faq
export type PatchFaqFromKeyMutationError = unknown

export const usePatchFaqFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchFaqFromKey>>,
    TError,
    { key: number; data: Faq; params?: PatchFaqFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchFaqFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

export const deleteFaqFromKey = (key: number) => {
  return configRequest<void>({ url: `/Faq/${key}`, method: 'DELETE' })
}

export const getDeleteFaqFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFaqFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFaqFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteFaqFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteFaqFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteFaqFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteFaqFromKey>>
>

export type DeleteFaqFromKeyMutationError = unknown

export const useDeleteFaqFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFaqFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteFaqFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary object with key from oData query.
 */
export const getFaqFromKey = (
  key: number,
  params?: GetFaqFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Faq>({
    url: `/Faq/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetFaqFromKeyQueryKey = (
  key: number,
  params?: GetFaqFromKeyParams
) => {
  return [`/Faq/${key}`, ...(params ? [params] : [])] as const
}

export const getGetFaqFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getFaqFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetFaqFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFaqFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetFaqFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFaqFromKey>>> = ({
    signal,
  }) => getFaqFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getFaqFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetFaqFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFaqFromKey>>
>
export type GetFaqFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetFaqFromKey = <
  TData = Awaited<ReturnType<typeof getFaqFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetFaqFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFaqFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFaqFromKeyQueryOptions(key, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putFaqFromKey = (
  key: number,
  faq: Faq,
  params?: PutFaqFromKeyParams
) => {
  return configRequest<void>({
    url: `/Faq/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: faq,
    params,
  })
}

export const getPutFaqFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putFaqFromKey>>,
    TError,
    { key: number; data: Faq; params?: PutFaqFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putFaqFromKey>>,
  TError,
  { key: number; data: Faq; params?: PutFaqFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putFaqFromKey>>,
    { key: number; data: Faq; params?: PutFaqFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putFaqFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutFaqFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putFaqFromKey>>
>
export type PutFaqFromKeyMutationBody = Faq
export type PutFaqFromKeyMutationError = unknown

export const usePutFaqFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putFaqFromKey>>,
    TError,
    { key: number; data: Faq; params?: PutFaqFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutFaqFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getFaqCount = (
  params?: GetFaqCountParams,
  signal?: AbortSignal
) => {
  return configRequest<Faq[]>({
    url: `/Faq/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetFaqCountQueryKey = (params?: GetFaqCountParams) => {
  return [`/Faq/$count`, ...(params ? [params] : [])] as const
}

export const getGetFaqCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getFaqCount>>,
  TError = void,
>(
  params?: GetFaqCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFaqCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetFaqCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFaqCount>>> = ({
    signal,
  }) => getFaqCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFaqCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetFaqCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFaqCount>>
>
export type GetFaqCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetFaqCount = <
  TData = Awaited<ReturnType<typeof getFaqCount>>,
  TError = void,
>(
  params?: GetFaqCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFaqCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFaqCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getJurisdictionLocationsFromKey = (
  key: number,
  params?: GetJurisdictionLocationsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/Jurisdiction/${key}/locations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetJurisdictionLocationsFromKeyQueryKey = (
  key: number,
  params?: GetJurisdictionLocationsFromKeyParams
) => {
  return [
    `/Jurisdiction/${key}/locations`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetJurisdictionLocationsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetJurisdictionLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetJurisdictionLocationsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>
  > = ({ signal }) => getJurisdictionLocationsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetJurisdictionLocationsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>
>
export type GetJurisdictionLocationsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const useGetJurisdictionLocationsFromKey = <
  TData = Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetJurisdictionLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getJurisdictionLocationsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetJurisdictionLocationsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getJurisdictionLocationsCountFromKey = (
  key: number,
  params?: GetJurisdictionLocationsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/Jurisdiction/${key}/locations/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetJurisdictionLocationsCountFromKeyQueryKey = (
  key: number,
  params?: GetJurisdictionLocationsCountFromKeyParams
) => {
  return [
    `/Jurisdiction/${key}/locations/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetJurisdictionLocationsCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetJurisdictionLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetJurisdictionLocationsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>
  > = ({ signal }) => getJurisdictionLocationsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetJurisdictionLocationsCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>
>
export type GetJurisdictionLocationsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const useGetJurisdictionLocationsCountFromKey = <
  TData = Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetJurisdictionLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getJurisdictionLocationsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetJurisdictionLocationsCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postJurisdiction = (
  jurisdiction: Jurisdiction,
  params?: PostJurisdictionParams
) => {
  return configRequest<void>({
    url: `/Jurisdiction`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: jurisdiction,
    params,
  })
}

export const getPostJurisdictionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postJurisdiction>>,
    TError,
    { data: Jurisdiction; params?: PostJurisdictionParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postJurisdiction>>,
  TError,
  { data: Jurisdiction; params?: PostJurisdictionParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postJurisdiction>>,
    { data: Jurisdiction; params?: PostJurisdictionParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postJurisdiction(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostJurisdictionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postJurisdiction>>
>
export type PostJurisdictionMutationBody = Jurisdiction
export type PostJurisdictionMutationError = unknown

export const usePostJurisdiction = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postJurisdiction>>,
    TError,
    { data: Jurisdiction; params?: PostJurisdictionParams },
    TContext
  >
}) => {
  const mutationOptions = getPostJurisdictionMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getJurisdiction = (
  params?: GetJurisdictionParams,
  signal?: AbortSignal
) => {
  return configRequest<Jurisdiction[]>({
    url: `/Jurisdiction`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetJurisdictionQueryKey = (params?: GetJurisdictionParams) => {
  return [`/Jurisdiction`, ...(params ? [params] : [])] as const
}

export const getGetJurisdictionQueryOptions = <
  TData = Awaited<ReturnType<typeof getJurisdiction>>,
  TError = void,
>(
  params?: GetJurisdictionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getJurisdiction>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetJurisdictionQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getJurisdiction>>> = ({
    signal,
  }) => getJurisdiction(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getJurisdiction>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetJurisdictionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getJurisdiction>>
>
export type GetJurisdictionQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetJurisdiction = <
  TData = Awaited<ReturnType<typeof getJurisdiction>>,
  TError = void,
>(
  params?: GetJurisdictionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getJurisdiction>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetJurisdictionQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const patchJurisdictionFromKey = (
  key: number,
  jurisdiction: Jurisdiction,
  params?: PatchJurisdictionFromKeyParams
) => {
  return configRequest<void>({
    url: `/Jurisdiction/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: jurisdiction,
    params,
  })
}

export const getPatchJurisdictionFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchJurisdictionFromKey>>,
    TError,
    {
      key: number
      data: Jurisdiction
      params?: PatchJurisdictionFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchJurisdictionFromKey>>,
  TError,
  { key: number; data: Jurisdiction; params?: PatchJurisdictionFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchJurisdictionFromKey>>,
    { key: number; data: Jurisdiction; params?: PatchJurisdictionFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchJurisdictionFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchJurisdictionFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchJurisdictionFromKey>>
>
export type PatchJurisdictionFromKeyMutationBody = Jurisdiction
export type PatchJurisdictionFromKeyMutationError = unknown

export const usePatchJurisdictionFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchJurisdictionFromKey>>,
    TError,
    {
      key: number
      data: Jurisdiction
      params?: PatchJurisdictionFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPatchJurisdictionFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

export const deleteJurisdictionFromKey = (key: number) => {
  return configRequest<void>({
    url: `/Jurisdiction/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteJurisdictionFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteJurisdictionFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteJurisdictionFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteJurisdictionFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteJurisdictionFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteJurisdictionFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteJurisdictionFromKey>>
>

export type DeleteJurisdictionFromKeyMutationError = unknown

export const useDeleteJurisdictionFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteJurisdictionFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteJurisdictionFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary object with key from oData query.
 */
export const getJurisdictionFromKey = (
  key: number,
  params?: GetJurisdictionFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Jurisdiction>({
    url: `/Jurisdiction/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetJurisdictionFromKeyQueryKey = (
  key: number,
  params?: GetJurisdictionFromKeyParams
) => {
  return [`/Jurisdiction/${key}`, ...(params ? [params] : [])] as const
}

export const getGetJurisdictionFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getJurisdictionFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetJurisdictionFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getJurisdictionFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetJurisdictionFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getJurisdictionFromKey>>
  > = ({ signal }) => getJurisdictionFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getJurisdictionFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetJurisdictionFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getJurisdictionFromKey>>
>
export type GetJurisdictionFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetJurisdictionFromKey = <
  TData = Awaited<ReturnType<typeof getJurisdictionFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetJurisdictionFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getJurisdictionFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetJurisdictionFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putJurisdictionFromKey = (
  key: number,
  jurisdiction: Jurisdiction,
  params?: PutJurisdictionFromKeyParams
) => {
  return configRequest<void>({
    url: `/Jurisdiction/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: jurisdiction,
    params,
  })
}

export const getPutJurisdictionFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putJurisdictionFromKey>>,
    TError,
    { key: number; data: Jurisdiction; params?: PutJurisdictionFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putJurisdictionFromKey>>,
  TError,
  { key: number; data: Jurisdiction; params?: PutJurisdictionFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putJurisdictionFromKey>>,
    { key: number; data: Jurisdiction; params?: PutJurisdictionFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putJurisdictionFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutJurisdictionFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putJurisdictionFromKey>>
>
export type PutJurisdictionFromKeyMutationBody = Jurisdiction
export type PutJurisdictionFromKeyMutationError = unknown

export const usePutJurisdictionFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putJurisdictionFromKey>>,
    TError,
    { key: number; data: Jurisdiction; params?: PutJurisdictionFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutJurisdictionFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getJurisdictionCount = (
  params?: GetJurisdictionCountParams,
  signal?: AbortSignal
) => {
  return configRequest<Jurisdiction[]>({
    url: `/Jurisdiction/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetJurisdictionCountQueryKey = (
  params?: GetJurisdictionCountParams
) => {
  return [`/Jurisdiction/$count`, ...(params ? [params] : [])] as const
}

export const getGetJurisdictionCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getJurisdictionCount>>,
  TError = void,
>(
  params?: GetJurisdictionCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getJurisdictionCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetJurisdictionCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getJurisdictionCount>>
  > = ({ signal }) => getJurisdictionCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getJurisdictionCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetJurisdictionCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getJurisdictionCount>>
>
export type GetJurisdictionCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetJurisdictionCount = <
  TData = Awaited<ReturnType<typeof getJurisdictionCount>>,
  TError = void,
>(
  params?: GetJurisdictionCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getJurisdictionCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetJurisdictionCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const getLocationApproachesFromKey = (
  key: number,
  params?: GetLocationApproachesFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Approach[]>({
    url: `/Location/${key}/approaches`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationApproachesFromKeyQueryKey = (
  key: number,
  params?: GetLocationApproachesFromKeyParams
) => {
  return [`/Location/${key}/approaches`, ...(params ? [params] : [])] as const
}

export const getGetLocationApproachesFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationApproachesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationApproachesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationApproachesFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetLocationApproachesFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationApproachesFromKey>>
  > = ({ signal }) => getLocationApproachesFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationApproachesFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationApproachesFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationApproachesFromKey>>
>
export type GetLocationApproachesFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const useGetLocationApproachesFromKey = <
  TData = Awaited<ReturnType<typeof getLocationApproachesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationApproachesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationApproachesFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationApproachesFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const getLocationApproachesCountFromKey = (
  key: number,
  params?: GetLocationApproachesCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Approach[]>({
    url: `/Location/${key}/approaches/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationApproachesCountFromKeyQueryKey = (
  key: number,
  params?: GetLocationApproachesCountFromKeyParams
) => {
  return [
    `/Location/${key}/approaches/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetLocationApproachesCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationApproachesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetLocationApproachesCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>
  > = ({ signal }) => getLocationApproachesCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationApproachesCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>
>
export type GetLocationApproachesCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const useGetLocationApproachesCountFromKey = <
  TData = Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationApproachesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationApproachesCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationApproachesCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */
export const getLocationAreasFromKey = (
  key: number,
  params?: GetLocationAreasFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Area[]>({
    url: `/Location/${key}/areas`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationAreasFromKeyQueryKey = (
  key: number,
  params?: GetLocationAreasFromKeyParams
) => {
  return [`/Location/${key}/areas`, ...(params ? [params] : [])] as const
}

export const getGetLocationAreasFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationAreasFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationAreasFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationAreasFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLocationAreasFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationAreasFromKey>>
  > = ({ signal }) => getLocationAreasFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationAreasFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationAreasFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationAreasFromKey>>
>
export type GetLocationAreasFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */
export const useGetLocationAreasFromKey = <
  TData = Awaited<ReturnType<typeof getLocationAreasFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationAreasFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationAreasFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationAreasFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */
export const getLocationAreasCountFromKey = (
  key: number,
  params?: GetLocationAreasCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Area[]>({
    url: `/Location/${key}/areas/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationAreasCountFromKeyQueryKey = (
  key: number,
  params?: GetLocationAreasCountFromKeyParams
) => {
  return [`/Location/${key}/areas/$count`, ...(params ? [params] : [])] as const
}

export const getGetLocationAreasCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationAreasCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationAreasCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationAreasCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetLocationAreasCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationAreasCountFromKey>>
  > = ({ signal }) => getLocationAreasCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationAreasCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationAreasCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationAreasCountFromKey>>
>
export type GetLocationAreasCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */
export const useGetLocationAreasCountFromKey = <
  TData = Awaited<ReturnType<typeof getLocationAreasCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationAreasCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationAreasCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationAreasCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const getLocationDevicesFromKey = (
  key: number,
  params?: GetLocationDevicesFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Device[]>({
    url: `/Location/${key}/devices`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationDevicesFromKeyQueryKey = (
  key: number,
  params?: GetLocationDevicesFromKeyParams
) => {
  return [`/Location/${key}/devices`, ...(params ? [params] : [])] as const
}

export const getGetLocationDevicesFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationDevicesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationDevicesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationDevicesFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLocationDevicesFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationDevicesFromKey>>
  > = ({ signal }) => getLocationDevicesFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationDevicesFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationDevicesFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationDevicesFromKey>>
>
export type GetLocationDevicesFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const useGetLocationDevicesFromKey = <
  TData = Awaited<ReturnType<typeof getLocationDevicesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationDevicesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationDevicesFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationDevicesFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const getLocationDevicesCountFromKey = (
  key: number,
  params?: GetLocationDevicesCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Device[]>({
    url: `/Location/${key}/devices/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationDevicesCountFromKeyQueryKey = (
  key: number,
  params?: GetLocationDevicesCountFromKeyParams
) => {
  return [
    `/Location/${key}/devices/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetLocationDevicesCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationDevicesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetLocationDevicesCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>
  > = ({ signal }) => getLocationDevicesCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationDevicesCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>
>
export type GetLocationDevicesCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const useGetLocationDevicesCountFromKey = <
  TData = Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationDevicesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationDevicesCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationDevicesCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Copies Utah.Udot.Atspm.Data.Models.Location and associated Utah.Udot.Atspm.Data.Models.Approach to new version
 */
export const getLocationCopyLocationToNewVersionFromKey = (
  key: number,
  params?: GetLocationCopyLocationToNewVersionFromKeyParams
) => {
  return configRequest<Location>({
    url: `/Location/${key}/CopyLocationToNewVersion`,
    method: 'POST',
    params,
  })
}

export const getGetLocationCopyLocationToNewVersionFromKeyMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>,
    TError,
    { key: number; params?: GetLocationCopyLocationToNewVersionFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>,
  TError,
  { key: number; params?: GetLocationCopyLocationToNewVersionFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>,
    { key: number; params?: GetLocationCopyLocationToNewVersionFromKeyParams }
  > = (props) => {
    const { key, params } = props ?? {}

    return getLocationCopyLocationToNewVersionFromKey(key, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLocationCopyLocationToNewVersionFromKeyMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>
  >

export type GetLocationCopyLocationToNewVersionFromKeyMutationError = void

/**
 * @summary Copies Utah.Udot.Atspm.Data.Models.Location and associated Utah.Udot.Atspm.Data.Models.Approach to new version
 */
export const useGetLocationCopyLocationToNewVersionFromKey = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLocationCopyLocationToNewVersionFromKey>>,
    TError,
    { key: number; params?: GetLocationCopyLocationToNewVersionFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions =
    getGetLocationCopyLocationToNewVersionFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Marks Utah.Udot.Atspm.Data.Models.Location to deleted
 */
export const deleteLocationSetLocationTodFromKey = (
  key: number,
  params?: DeleteLocationSetLocationTodFromKeyParams
) => {
  return configRequest<void>({
    url: `/Location/${key}/SetLocationToDeleted`,
    method: 'POST',
    params,
  })
}

export const getDeleteLocationSetLocationTodFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>,
    TError,
    { key: number; params?: DeleteLocationSetLocationTodFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>,
  TError,
  { key: number; params?: DeleteLocationSetLocationTodFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>,
    { key: number; params?: DeleteLocationSetLocationTodFromKeyParams }
  > = (props) => {
    const { key, params } = props ?? {}

    return deleteLocationSetLocationTodFromKey(key, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteLocationSetLocationTodFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>
>

export type DeleteLocationSetLocationTodFromKeyMutationError = unknown

/**
 * @summary Marks Utah.Udot.Atspm.Data.Models.Location to deleted
 */
export const useDeleteLocationSetLocationTodFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLocationSetLocationTodFromKey>>,
    TError,
    { key: number; params?: DeleteLocationSetLocationTodFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions =
    getDeleteLocationSetLocationTodFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get latest version of Utah.Udot.Atspm.Data.Models.Location and related entities that match identifier
 */
export const getLocationLatestVersionOfLocationFromIdentifier = (
  identifier: string,
  params?: GetLocationLatestVersionOfLocationFromIdentifierParams,
  signal?: AbortSignal
) => {
  return configRequest<Location>({
    url: `/Location/GetLatestVersionOfLocation(identifier=${identifier})`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationLatestVersionOfLocationFromIdentifierQueryKey = (
  identifier: string,
  params?: GetLocationLatestVersionOfLocationFromIdentifierParams
) => {
  return [
    `/Location/GetLatestVersionOfLocation(identifier=${identifier})`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetLocationLatestVersionOfLocationFromIdentifierQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>
  >,
  TError = void,
>(
  identifier: string,
  params?: GetLocationLatestVersionOfLocationFromIdentifierParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>
      >,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetLocationLatestVersionOfLocationFromIdentifierQueryKey(
      identifier,
      params
    )

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>>
  > = ({ signal }) =>
    getLocationLatestVersionOfLocationFromIdentifier(identifier, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!identifier,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<
      ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>
    >,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationLatestVersionOfLocationFromIdentifierQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>>
  >
export type GetLocationLatestVersionOfLocationFromIdentifierQueryError = void

/**
 * @summary Get latest version of Utah.Udot.Atspm.Data.Models.Location and related entities that match identifier
 */
export const useGetLocationLatestVersionOfLocationFromIdentifier = <
  TData = Awaited<
    ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>
  >,
  TError = void,
>(
  identifier: string,
  params?: GetLocationLatestVersionOfLocationFromIdentifierParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof getLocationLatestVersionOfLocationFromIdentifier>
      >,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetLocationLatestVersionOfLocationFromIdentifierQueryOptions(
      identifier,
      params,
      options
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get all active Utah.Udot.Atspm.Data.Models.Location that match identifier
 */
export const getLocationAllVersionsOfLocationFromIdentifier = (
  identifier: string,
  params?: GetLocationAllVersionsOfLocationFromIdentifierParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/Location/GetAllVersionsOfLocation(identifier=${identifier})`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationAllVersionsOfLocationFromIdentifierQueryKey = (
  identifier: string,
  params?: GetLocationAllVersionsOfLocationFromIdentifierParams
) => {
  return [
    `/Location/GetAllVersionsOfLocation(identifier=${identifier})`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetLocationAllVersionsOfLocationFromIdentifierQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>
  >,
  TError = void,
>(
  identifier: string,
  params?: GetLocationAllVersionsOfLocationFromIdentifierParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>
      >,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetLocationAllVersionsOfLocationFromIdentifierQueryKey(
      identifier,
      params
    )

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>>
  > = ({ signal }) =>
    getLocationAllVersionsOfLocationFromIdentifier(identifier, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!identifier,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationAllVersionsOfLocationFromIdentifierQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>>
  >
export type GetLocationAllVersionsOfLocationFromIdentifierQueryError = void

/**
 * @summary Get all active Utah.Udot.Atspm.Data.Models.Location that match identifier
 */
export const useGetLocationAllVersionsOfLocationFromIdentifier = <
  TData = Awaited<
    ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>
  >,
  TError = void,
>(
  identifier: string,
  params?: GetLocationAllVersionsOfLocationFromIdentifierParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof getLocationAllVersionsOfLocationFromIdentifier>
      >,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetLocationAllVersionsOfLocationFromIdentifierQueryOptions(
      identifier,
      params,
      options
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get latest version of all Utah.Udot.Atspm.Data.Models.Location
 */
export const getLocationLatestVersionOfAllLocations = (
  params?: GetLocationLatestVersionOfAllLocationsParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/Location/GetLatestVersionOfAllLocations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationLatestVersionOfAllLocationsQueryKey = (
  params?: GetLocationLatestVersionOfAllLocationsParams
) => {
  return [
    `/Location/GetLatestVersionOfAllLocations`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetLocationLatestVersionOfAllLocationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>,
  TError = void,
>(
  params?: GetLocationLatestVersionOfAllLocationsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetLocationLatestVersionOfAllLocationsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>
  > = ({ signal }) => getLocationLatestVersionOfAllLocations(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationLatestVersionOfAllLocationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>
>
export type GetLocationLatestVersionOfAllLocationsQueryError = void

/**
 * @summary Get latest version of all Utah.Udot.Atspm.Data.Models.Location
 */
export const useGetLocationLatestVersionOfAllLocations = <
  TData = Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>,
  TError = void,
>(
  params?: GetLocationLatestVersionOfAllLocationsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationLatestVersionOfAllLocations>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationLatestVersionOfAllLocationsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get count of Device Types using correct version of all Utah.Udot.Atspm.Data.Models.Location
 */
export const getLocationDetectionTypeCount = (
  params?: GetLocationDetectionTypeCountParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectionTypeGroup[]>({
    url: `/Location/GetDetectionTypeCount`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationDetectionTypeCountQueryKey = (
  params?: GetLocationDetectionTypeCountParams
) => {
  return [
    `/Location/GetDetectionTypeCount`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetLocationDetectionTypeCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationDetectionTypeCount>>,
  TError = void,
>(
  params?: GetLocationDetectionTypeCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationDetectionTypeCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLocationDetectionTypeCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationDetectionTypeCount>>
  > = ({ signal }) => getLocationDetectionTypeCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationDetectionTypeCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationDetectionTypeCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationDetectionTypeCount>>
>
export type GetLocationDetectionTypeCountQueryError = void

/**
 * @summary Get count of Device Types using correct version of all Utah.Udot.Atspm.Data.Models.Location
 */
export const useGetLocationDetectionTypeCount = <
  TData = Awaited<ReturnType<typeof getLocationDetectionTypeCount>>,
  TError = void,
>(
  params?: GetLocationDetectionTypeCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationDetectionTypeCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationDetectionTypeCountQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Gets an optimized list of Utah.Udot.Atspm.ConfigApi.Models.SearchLocation to use for Location selection
 */
export const getLocationLocationsForSearch = (
  params?: GetLocationLocationsForSearchParams,
  signal?: AbortSignal
) => {
  return configRequest<SearchLocation[]>({
    url: `/Location/GetLocationsForSearch`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationLocationsForSearchQueryKey = (
  params?: GetLocationLocationsForSearchParams
) => {
  return [
    `/Location/GetLocationsForSearch`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetLocationLocationsForSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationLocationsForSearch>>,
  TError = void,
>(
  params?: GetLocationLocationsForSearchParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationLocationsForSearch>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLocationLocationsForSearchQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationLocationsForSearch>>
  > = ({ signal }) => getLocationLocationsForSearch(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationLocationsForSearch>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationLocationsForSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationLocationsForSearch>>
>
export type GetLocationLocationsForSearchQueryError = void

/**
 * @summary Gets an optimized list of Utah.Udot.Atspm.ConfigApi.Models.SearchLocation to use for Location selection
 */
export const useGetLocationLocationsForSearch = <
  TData = Awaited<ReturnType<typeof getLocationLocationsForSearch>>,
  TError = void,
>(
  params?: GetLocationLocationsForSearchParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationLocationsForSearch>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationLocationsForSearchQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Collection of objects from oData query.
 */
export const getLocation = (
  params?: GetLocationParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/Location`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationQueryKey = (params?: GetLocationParams) => {
  return [`/Location`, ...(params ? [params] : [])] as const
}

export const getGetLocationQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocation>>,
  TError = void,
>(
  params?: GetLocationParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocation>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetLocationQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocation>>> = ({
    signal,
  }) => getLocation(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocation>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocation>>
>
export type GetLocationQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetLocation = <
  TData = Awaited<ReturnType<typeof getLocation>>,
  TError = void,
>(
  params?: GetLocationParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocation>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postLocation = (
  location: Location,
  params?: PostLocationParams
) => {
  return configRequest<void>({
    url: `/Location`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: location,
    params,
  })
}

export const getPostLocationMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLocation>>,
    TError,
    { data: Location; params?: PostLocationParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLocation>>,
  TError,
  { data: Location; params?: PostLocationParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLocation>>,
    { data: Location; params?: PostLocationParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postLocation(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLocation>>
>
export type PostLocationMutationBody = Location
export type PostLocationMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostLocation = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLocation>>,
    TError,
    { data: Location; params?: PostLocationParams },
    TContext
  >
}) => {
  const mutationOptions = getPostLocationMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getLocationCount = (
  params?: GetLocationCountParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/Location/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationCountQueryKey = (
  params?: GetLocationCountParams
) => {
  return [`/Location/$count`, ...(params ? [params] : [])] as const
}

export const getGetLocationCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationCount>>,
  TError = void,
>(
  params?: GetLocationCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetLocationCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationCount>>
  > = ({ signal }) => getLocationCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationCount>>
>
export type GetLocationCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetLocationCount = <
  TData = Awaited<ReturnType<typeof getLocationCount>>,
  TError = void,
>(
  params?: GetLocationCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getLocationFromKey = (
  key: number,
  params?: GetLocationFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Location>({
    url: `/Location/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationFromKeyQueryKey = (
  key: number,
  params?: GetLocationFromKeyParams
) => {
  return [`/Location/${key}`, ...(params ? [params] : [])] as const
}

export const getGetLocationFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLocationFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationFromKey>>
  > = ({ signal }) => getLocationFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationFromKey>>
>
export type GetLocationFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetLocationFromKey = <
  TData = Awaited<ReturnType<typeof getLocationFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationFromKeyQueryOptions(key, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putLocationFromKey = (
  key: number,
  location: Location,
  params?: PutLocationFromKeyParams
) => {
  return configRequest<void>({
    url: `/Location/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: location,
    params,
  })
}

export const getPutLocationFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLocationFromKey>>,
    TError,
    { key: number; data: Location; params?: PutLocationFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putLocationFromKey>>,
  TError,
  { key: number; data: Location; params?: PutLocationFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putLocationFromKey>>,
    { key: number; data: Location; params?: PutLocationFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putLocationFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutLocationFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putLocationFromKey>>
>
export type PutLocationFromKeyMutationBody = Location
export type PutLocationFromKeyMutationError = unknown

export const usePutLocationFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLocationFromKey>>,
    TError,
    { key: number; data: Location; params?: PutLocationFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutLocationFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchLocationFromKey = (
  key: number,
  location: Location,
  params?: PatchLocationFromKeyParams
) => {
  return configRequest<void>({
    url: `/Location/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: location,
    params,
  })
}

export const getPatchLocationFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchLocationFromKey>>,
    TError,
    { key: number; data: Location; params?: PatchLocationFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchLocationFromKey>>,
  TError,
  { key: number; data: Location; params?: PatchLocationFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchLocationFromKey>>,
    { key: number; data: Location; params?: PatchLocationFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchLocationFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchLocationFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchLocationFromKey>>
>
export type PatchLocationFromKeyMutationBody = Location
export type PatchLocationFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchLocationFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchLocationFromKey>>,
    TError,
    { key: number; data: Location; params?: PatchLocationFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchLocationFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteLocationFromKey = (key: number) => {
  return configRequest<void>({
    url: `/Location/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteLocationFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLocationFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLocationFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteLocationFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteLocationFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteLocationFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteLocationFromKey>>
>

export type DeleteLocationFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteLocationFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLocationFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteLocationFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getLocationTypeLocationsFromKey = (
  key: number,
  params?: GetLocationTypeLocationsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/LocationType/${key}/locations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationTypeLocationsFromKeyQueryKey = (
  key: number,
  params?: GetLocationTypeLocationsFromKeyParams
) => {
  return [
    `/LocationType/${key}/locations`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetLocationTypeLocationsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationTypeLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetLocationTypeLocationsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>
  > = ({ signal }) => getLocationTypeLocationsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationTypeLocationsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>
>
export type GetLocationTypeLocationsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const useGetLocationTypeLocationsFromKey = <
  TData = Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationTypeLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationTypeLocationsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationTypeLocationsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getLocationTypeLocationsCountFromKey = (
  key: number,
  params?: GetLocationTypeLocationsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/LocationType/${key}/locations/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationTypeLocationsCountFromKeyQueryKey = (
  key: number,
  params?: GetLocationTypeLocationsCountFromKeyParams
) => {
  return [
    `/LocationType/${key}/locations/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetLocationTypeLocationsCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationTypeLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetLocationTypeLocationsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>
  > = ({ signal }) => getLocationTypeLocationsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationTypeLocationsCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>
>
export type GetLocationTypeLocationsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const useGetLocationTypeLocationsCountFromKey = <
  TData = Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationTypeLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationTypeLocationsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationTypeLocationsCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Collection of objects from oData query.
 */
export const getLocationType = (
  params?: GetLocationTypeParams,
  signal?: AbortSignal
) => {
  return configRequest<LocationType[]>({
    url: `/LocationType`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationTypeQueryKey = (params?: GetLocationTypeParams) => {
  return [`/LocationType`, ...(params ? [params] : [])] as const
}

export const getGetLocationTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationType>>,
  TError = void,
>(
  params?: GetLocationTypeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationType>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetLocationTypeQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationType>>> = ({
    signal,
  }) => getLocationType(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationType>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationType>>
>
export type GetLocationTypeQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetLocationType = <
  TData = Awaited<ReturnType<typeof getLocationType>>,
  TError = void,
>(
  params?: GetLocationTypeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationType>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationTypeQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postLocationType = (
  locationType: LocationType,
  params?: PostLocationTypeParams
) => {
  return configRequest<void>({
    url: `/LocationType`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: locationType,
    params,
  })
}

export const getPostLocationTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLocationType>>,
    TError,
    { data: LocationType; params?: PostLocationTypeParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLocationType>>,
  TError,
  { data: LocationType; params?: PostLocationTypeParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLocationType>>,
    { data: LocationType; params?: PostLocationTypeParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postLocationType(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostLocationTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLocationType>>
>
export type PostLocationTypeMutationBody = LocationType
export type PostLocationTypeMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostLocationType = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLocationType>>,
    TError,
    { data: LocationType; params?: PostLocationTypeParams },
    TContext
  >
}) => {
  const mutationOptions = getPostLocationTypeMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getLocationTypeCount = (
  params?: GetLocationTypeCountParams,
  signal?: AbortSignal
) => {
  return configRequest<LocationType[]>({
    url: `/LocationType/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationTypeCountQueryKey = (
  params?: GetLocationTypeCountParams
) => {
  return [`/LocationType/$count`, ...(params ? [params] : [])] as const
}

export const getGetLocationTypeCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationTypeCount>>,
  TError = void,
>(
  params?: GetLocationTypeCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationTypeCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLocationTypeCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationTypeCount>>
  > = ({ signal }) => getLocationTypeCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationTypeCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationTypeCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationTypeCount>>
>
export type GetLocationTypeCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetLocationTypeCount = <
  TData = Awaited<ReturnType<typeof getLocationTypeCount>>,
  TError = void,
>(
  params?: GetLocationTypeCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationTypeCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationTypeCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getLocationTypeFromKey = (
  key: number,
  params?: GetLocationTypeFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<LocationType>({
    url: `/LocationType/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetLocationTypeFromKeyQueryKey = (
  key: number,
  params?: GetLocationTypeFromKeyParams
) => {
  return [`/LocationType/${key}`, ...(params ? [params] : [])] as const
}

export const getGetLocationTypeFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationTypeFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationTypeFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationTypeFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLocationTypeFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLocationTypeFromKey>>
  > = ({ signal }) => getLocationTypeFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationTypeFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationTypeFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocationTypeFromKey>>
>
export type GetLocationTypeFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetLocationTypeFromKey = <
  TData = Awaited<ReturnType<typeof getLocationTypeFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetLocationTypeFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLocationTypeFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationTypeFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putLocationTypeFromKey = (
  key: number,
  locationType: LocationType,
  params?: PutLocationTypeFromKeyParams
) => {
  return configRequest<void>({
    url: `/LocationType/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: locationType,
    params,
  })
}

export const getPutLocationTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLocationTypeFromKey>>,
    TError,
    { key: number; data: LocationType; params?: PutLocationTypeFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putLocationTypeFromKey>>,
  TError,
  { key: number; data: LocationType; params?: PutLocationTypeFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putLocationTypeFromKey>>,
    { key: number; data: LocationType; params?: PutLocationTypeFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putLocationTypeFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutLocationTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putLocationTypeFromKey>>
>
export type PutLocationTypeFromKeyMutationBody = LocationType
export type PutLocationTypeFromKeyMutationError = unknown

export const usePutLocationTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLocationTypeFromKey>>,
    TError,
    { key: number; data: LocationType; params?: PutLocationTypeFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutLocationTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchLocationTypeFromKey = (
  key: number,
  locationType: LocationType,
  params?: PatchLocationTypeFromKeyParams
) => {
  return configRequest<void>({
    url: `/LocationType/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: locationType,
    params,
  })
}

export const getPatchLocationTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchLocationTypeFromKey>>,
    TError,
    {
      key: number
      data: LocationType
      params?: PatchLocationTypeFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchLocationTypeFromKey>>,
  TError,
  { key: number; data: LocationType; params?: PatchLocationTypeFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchLocationTypeFromKey>>,
    { key: number; data: LocationType; params?: PatchLocationTypeFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchLocationTypeFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchLocationTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchLocationTypeFromKey>>
>
export type PatchLocationTypeFromKeyMutationBody = LocationType
export type PatchLocationTypeFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchLocationTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchLocationTypeFromKey>>,
    TError,
    {
      key: number
      data: LocationType
      params?: PatchLocationTypeFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPatchLocationTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteLocationTypeFromKey = (key: number) => {
  return configRequest<void>({
    url: `/LocationType/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteLocationTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLocationTypeFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLocationTypeFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteLocationTypeFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteLocationTypeFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteLocationTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteLocationTypeFromKey>>
>

export type DeleteLocationTypeFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteLocationTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLocationTypeFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteLocationTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const getMeasureCommentMeasureTypesFromKey = (
  key: number,
  params?: GetMeasureCommentMeasureTypesFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureType[]>({
    url: `/MeasureComment/${key}/measureTypes`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureCommentMeasureTypesFromKeyQueryKey = (
  key: number,
  params?: GetMeasureCommentMeasureTypesFromKeyParams
) => {
  return [
    `/MeasureComment/${key}/measureTypes`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetMeasureCommentMeasureTypesFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureCommentMeasureTypesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetMeasureCommentMeasureTypesFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>
  > = ({ signal }) => getMeasureCommentMeasureTypesFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureCommentMeasureTypesFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>
>
export type GetMeasureCommentMeasureTypesFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const useGetMeasureCommentMeasureTypesFromKey = <
  TData = Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureCommentMeasureTypesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureCommentMeasureTypesFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureCommentMeasureTypesFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const getMeasureCommentMeasureTypesCountFromKey = (
  key: number,
  params?: GetMeasureCommentMeasureTypesCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureType[]>({
    url: `/MeasureComment/${key}/measureTypes/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureCommentMeasureTypesCountFromKeyQueryKey = (
  key: number,
  params?: GetMeasureCommentMeasureTypesCountFromKeyParams
) => {
  return [
    `/MeasureComment/${key}/measureTypes/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetMeasureCommentMeasureTypesCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureCommentMeasureTypesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetMeasureCommentMeasureTypesCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>
  > = ({ signal }) =>
    getMeasureCommentMeasureTypesCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureCommentMeasureTypesCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>
>
export type GetMeasureCommentMeasureTypesCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const useGetMeasureCommentMeasureTypesCountFromKey = <
  TData = Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureCommentMeasureTypesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureCommentMeasureTypesCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureCommentMeasureTypesCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Collection of objects from oData query.
 */
export const getMeasureComment = (
  params?: GetMeasureCommentParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureComment[]>({
    url: `/MeasureComment`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureCommentQueryKey = (
  params?: GetMeasureCommentParams
) => {
  return [`/MeasureComment`, ...(params ? [params] : [])] as const
}

export const getGetMeasureCommentQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureComment>>,
  TError = void,
>(
  params?: GetMeasureCommentParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureComment>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMeasureCommentQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureComment>>
  > = ({ signal }) => getMeasureComment(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureComment>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureCommentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureComment>>
>
export type GetMeasureCommentQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetMeasureComment = <
  TData = Awaited<ReturnType<typeof getMeasureComment>>,
  TError = void,
>(
  params?: GetMeasureCommentParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureComment>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureCommentQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postMeasureComment = (
  measureComment: MeasureComment,
  params?: PostMeasureCommentParams
) => {
  return configRequest<void>({
    url: `/MeasureComment`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: measureComment,
    params,
  })
}

export const getPostMeasureCommentMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMeasureComment>>,
    TError,
    { data: MeasureComment; params?: PostMeasureCommentParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMeasureComment>>,
  TError,
  { data: MeasureComment; params?: PostMeasureCommentParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMeasureComment>>,
    { data: MeasureComment; params?: PostMeasureCommentParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postMeasureComment(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostMeasureCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMeasureComment>>
>
export type PostMeasureCommentMutationBody = MeasureComment
export type PostMeasureCommentMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostMeasureComment = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMeasureComment>>,
    TError,
    { data: MeasureComment; params?: PostMeasureCommentParams },
    TContext
  >
}) => {
  const mutationOptions = getPostMeasureCommentMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getMeasureCommentCount = (
  params?: GetMeasureCommentCountParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureComment[]>({
    url: `/MeasureComment/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureCommentCountQueryKey = (
  params?: GetMeasureCommentCountParams
) => {
  return [`/MeasureComment/$count`, ...(params ? [params] : [])] as const
}

export const getGetMeasureCommentCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureCommentCount>>,
  TError = void,
>(
  params?: GetMeasureCommentCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureCommentCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMeasureCommentCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureCommentCount>>
  > = ({ signal }) => getMeasureCommentCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureCommentCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureCommentCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureCommentCount>>
>
export type GetMeasureCommentCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetMeasureCommentCount = <
  TData = Awaited<ReturnType<typeof getMeasureCommentCount>>,
  TError = void,
>(
  params?: GetMeasureCommentCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureCommentCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureCommentCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getMeasureCommentFromKey = (
  key: number,
  params?: GetMeasureCommentFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureComment>({
    url: `/MeasureComment/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureCommentFromKeyQueryKey = (
  key: number,
  params?: GetMeasureCommentFromKeyParams
) => {
  return [`/MeasureComment/${key}`, ...(params ? [params] : [])] as const
}

export const getGetMeasureCommentFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureCommentFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureCommentFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureCommentFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMeasureCommentFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureCommentFromKey>>
  > = ({ signal }) => getMeasureCommentFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureCommentFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureCommentFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureCommentFromKey>>
>
export type GetMeasureCommentFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetMeasureCommentFromKey = <
  TData = Awaited<ReturnType<typeof getMeasureCommentFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureCommentFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureCommentFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureCommentFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putMeasureCommentFromKey = (
  key: number,
  measureComment: MeasureComment,
  params?: PutMeasureCommentFromKeyParams
) => {
  return configRequest<void>({
    url: `/MeasureComment/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: measureComment,
    params,
  })
}

export const getPutMeasureCommentFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMeasureCommentFromKey>>,
    TError,
    {
      key: number
      data: MeasureComment
      params?: PutMeasureCommentFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putMeasureCommentFromKey>>,
  TError,
  {
    key: number
    data: MeasureComment
    params?: PutMeasureCommentFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putMeasureCommentFromKey>>,
    {
      key: number
      data: MeasureComment
      params?: PutMeasureCommentFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putMeasureCommentFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutMeasureCommentFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putMeasureCommentFromKey>>
>
export type PutMeasureCommentFromKeyMutationBody = MeasureComment
export type PutMeasureCommentFromKeyMutationError = unknown

export const usePutMeasureCommentFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMeasureCommentFromKey>>,
    TError,
    {
      key: number
      data: MeasureComment
      params?: PutMeasureCommentFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPutMeasureCommentFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchMeasureCommentFromKey = (
  key: number,
  measureComment: MeasureComment,
  params?: PatchMeasureCommentFromKeyParams
) => {
  return configRequest<void>({
    url: `/MeasureComment/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: measureComment,
    params,
  })
}

export const getPatchMeasureCommentFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchMeasureCommentFromKey>>,
    TError,
    {
      key: number
      data: MeasureComment
      params?: PatchMeasureCommentFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchMeasureCommentFromKey>>,
  TError,
  {
    key: number
    data: MeasureComment
    params?: PatchMeasureCommentFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchMeasureCommentFromKey>>,
    {
      key: number
      data: MeasureComment
      params?: PatchMeasureCommentFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchMeasureCommentFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchMeasureCommentFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchMeasureCommentFromKey>>
>
export type PatchMeasureCommentFromKeyMutationBody = MeasureComment
export type PatchMeasureCommentFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchMeasureCommentFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchMeasureCommentFromKey>>,
    TError,
    {
      key: number
      data: MeasureComment
      params?: PatchMeasureCommentFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPatchMeasureCommentFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteMeasureCommentFromKey = (key: number) => {
  return configRequest<void>({
    url: `/MeasureComment/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteMeasureCommentFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteMeasureCommentFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteMeasureCommentFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>
>

export type DeleteMeasureCommentFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteMeasureCommentFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMeasureCommentFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteMeasureCommentFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getMeasureOption = (
  params?: GetMeasureOptionParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureOption[]>({
    url: `/MeasureOption`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureOptionQueryKey = (
  params?: GetMeasureOptionParams
) => {
  return [`/MeasureOption`, ...(params ? [params] : [])] as const
}

export const getGetMeasureOptionQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureOption>>,
  TError = void,
>(
  params?: GetMeasureOptionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureOption>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetMeasureOptionQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureOption>>
  > = ({ signal }) => getMeasureOption(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureOption>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureOptionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureOption>>
>
export type GetMeasureOptionQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetMeasureOption = <
  TData = Awaited<ReturnType<typeof getMeasureOption>>,
  TError = void,
>(
  params?: GetMeasureOptionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureOption>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureOptionQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postMeasureOption = (
  measureOption: MeasureOption,
  params?: PostMeasureOptionParams
) => {
  return configRequest<void>({
    url: `/MeasureOption`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: measureOption,
    params,
  })
}

export const getPostMeasureOptionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMeasureOption>>,
    TError,
    { data: MeasureOption; params?: PostMeasureOptionParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMeasureOption>>,
  TError,
  { data: MeasureOption; params?: PostMeasureOptionParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMeasureOption>>,
    { data: MeasureOption; params?: PostMeasureOptionParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postMeasureOption(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostMeasureOptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMeasureOption>>
>
export type PostMeasureOptionMutationBody = MeasureOption
export type PostMeasureOptionMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostMeasureOption = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMeasureOption>>,
    TError,
    { data: MeasureOption; params?: PostMeasureOptionParams },
    TContext
  >
}) => {
  const mutationOptions = getPostMeasureOptionMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getMeasureOptionCount = (
  params?: GetMeasureOptionCountParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureOption[]>({
    url: `/MeasureOption/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureOptionCountQueryKey = (
  params?: GetMeasureOptionCountParams
) => {
  return [`/MeasureOption/$count`, ...(params ? [params] : [])] as const
}

export const getGetMeasureOptionCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureOptionCount>>,
  TError = void,
>(
  params?: GetMeasureOptionCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureOptionCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMeasureOptionCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureOptionCount>>
  > = ({ signal }) => getMeasureOptionCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureOptionCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureOptionCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureOptionCount>>
>
export type GetMeasureOptionCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetMeasureOptionCount = <
  TData = Awaited<ReturnType<typeof getMeasureOptionCount>>,
  TError = void,
>(
  params?: GetMeasureOptionCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureOptionCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureOptionCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getMeasureOptionFromKey = (
  key: number,
  params?: GetMeasureOptionFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureOption>({
    url: `/MeasureOption/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureOptionFromKeyQueryKey = (
  key: number,
  params?: GetMeasureOptionFromKeyParams
) => {
  return [`/MeasureOption/${key}`, ...(params ? [params] : [])] as const
}

export const getGetMeasureOptionFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureOptionFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureOptionFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureOptionFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMeasureOptionFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureOptionFromKey>>
  > = ({ signal }) => getMeasureOptionFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureOptionFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureOptionFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureOptionFromKey>>
>
export type GetMeasureOptionFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetMeasureOptionFromKey = <
  TData = Awaited<ReturnType<typeof getMeasureOptionFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureOptionFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureOptionFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureOptionFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putMeasureOptionFromKey = (
  key: number,
  measureOption: MeasureOption,
  params?: PutMeasureOptionFromKeyParams
) => {
  return configRequest<void>({
    url: `/MeasureOption/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: measureOption,
    params,
  })
}

export const getPutMeasureOptionFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMeasureOptionFromKey>>,
    TError,
    {
      key: number
      data: MeasureOption
      params?: PutMeasureOptionFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putMeasureOptionFromKey>>,
  TError,
  { key: number; data: MeasureOption; params?: PutMeasureOptionFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putMeasureOptionFromKey>>,
    { key: number; data: MeasureOption; params?: PutMeasureOptionFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putMeasureOptionFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutMeasureOptionFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putMeasureOptionFromKey>>
>
export type PutMeasureOptionFromKeyMutationBody = MeasureOption
export type PutMeasureOptionFromKeyMutationError = unknown

export const usePutMeasureOptionFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMeasureOptionFromKey>>,
    TError,
    {
      key: number
      data: MeasureOption
      params?: PutMeasureOptionFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPutMeasureOptionFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchMeasureOptionFromKey = (
  key: number,
  measureOption: MeasureOption,
  params?: PatchMeasureOptionFromKeyParams
) => {
  return configRequest<void>({
    url: `/MeasureOption/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: measureOption,
    params,
  })
}

export const getPatchMeasureOptionFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchMeasureOptionFromKey>>,
    TError,
    {
      key: number
      data: MeasureOption
      params?: PatchMeasureOptionFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchMeasureOptionFromKey>>,
  TError,
  {
    key: number
    data: MeasureOption
    params?: PatchMeasureOptionFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchMeasureOptionFromKey>>,
    {
      key: number
      data: MeasureOption
      params?: PatchMeasureOptionFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchMeasureOptionFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchMeasureOptionFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchMeasureOptionFromKey>>
>
export type PatchMeasureOptionFromKeyMutationBody = MeasureOption
export type PatchMeasureOptionFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchMeasureOptionFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchMeasureOptionFromKey>>,
    TError,
    {
      key: number
      data: MeasureOption
      params?: PatchMeasureOptionFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPatchMeasureOptionFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteMeasureOptionFromKey = (key: number) => {
  return configRequest<void>({
    url: `/MeasureOption/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteMeasureOptionFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteMeasureOptionFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteMeasureOptionFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>
>

export type DeleteMeasureOptionFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteMeasureOptionFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMeasureOptionFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteMeasureOptionFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const getMeasureTypeDetectionTypesFromKey = (
  key: number,
  params?: GetMeasureTypeDetectionTypesFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectionType[]>({
    url: `/MeasureType/${key}/detectionTypes`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureTypeDetectionTypesFromKeyQueryKey = (
  key: number,
  params?: GetMeasureTypeDetectionTypesFromKeyParams
) => {
  return [
    `/MeasureType/${key}/detectionTypes`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetMeasureTypeDetectionTypesFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureTypeDetectionTypesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetMeasureTypeDetectionTypesFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>
  > = ({ signal }) => getMeasureTypeDetectionTypesFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureTypeDetectionTypesFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>
>
export type GetMeasureTypeDetectionTypesFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const useGetMeasureTypeDetectionTypesFromKey = <
  TData = Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureTypeDetectionTypesFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeDetectionTypesFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureTypeDetectionTypesFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const getMeasureTypeDetectionTypesCountFromKey = (
  key: number,
  params?: GetMeasureTypeDetectionTypesCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<DetectionType[]>({
    url: `/MeasureType/${key}/detectionTypes/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureTypeDetectionTypesCountFromKeyQueryKey = (
  key: number,
  params?: GetMeasureTypeDetectionTypesCountFromKeyParams
) => {
  return [
    `/MeasureType/${key}/detectionTypes/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetMeasureTypeDetectionTypesCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureTypeDetectionTypesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetMeasureTypeDetectionTypesCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>
  > = ({ signal }) =>
    getMeasureTypeDetectionTypesCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureTypeDetectionTypesCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>
>
export type GetMeasureTypeDetectionTypesCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const useGetMeasureTypeDetectionTypesCountFromKey = <
  TData = Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureTypeDetectionTypesCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeDetectionTypesCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureTypeDetectionTypesCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */
export const getMeasureTypeMeasureCommentsFromKey = (
  key: number,
  params?: GetMeasureTypeMeasureCommentsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureComment[]>({
    url: `/MeasureType/${key}/measureComments`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureTypeMeasureCommentsFromKeyQueryKey = (
  key: number,
  params?: GetMeasureTypeMeasureCommentsFromKeyParams
) => {
  return [
    `/MeasureType/${key}/measureComments`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetMeasureTypeMeasureCommentsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureTypeMeasureCommentsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetMeasureTypeMeasureCommentsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>
  > = ({ signal }) => getMeasureTypeMeasureCommentsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureTypeMeasureCommentsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>
>
export type GetMeasureTypeMeasureCommentsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */
export const useGetMeasureTypeMeasureCommentsFromKey = <
  TData = Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureTypeMeasureCommentsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureTypeMeasureCommentsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */
export const getMeasureTypeMeasureCommentsCountFromKey = (
  key: number,
  params?: GetMeasureTypeMeasureCommentsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureComment[]>({
    url: `/MeasureType/${key}/measureComments/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureTypeMeasureCommentsCountFromKeyQueryKey = (
  key: number,
  params?: GetMeasureTypeMeasureCommentsCountFromKeyParams
) => {
  return [
    `/MeasureType/${key}/measureComments/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetMeasureTypeMeasureCommentsCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureTypeMeasureCommentsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetMeasureTypeMeasureCommentsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>
  > = ({ signal }) =>
    getMeasureTypeMeasureCommentsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureTypeMeasureCommentsCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>
>
export type GetMeasureTypeMeasureCommentsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */
export const useGetMeasureTypeMeasureCommentsCountFromKey = <
  TData = Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureTypeMeasureCommentsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeMeasureCommentsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureTypeMeasureCommentsCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Collection of objects from oData query.
 */
export const getMeasureType = (
  params?: GetMeasureTypeParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureType[]>({
    url: `/MeasureType`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureTypeQueryKey = (params?: GetMeasureTypeParams) => {
  return [`/MeasureType`, ...(params ? [params] : [])] as const
}

export const getGetMeasureTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureType>>,
  TError = void,
>(
  params?: GetMeasureTypeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureType>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetMeasureTypeQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeasureType>>> = ({
    signal,
  }) => getMeasureType(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureType>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureType>>
>
export type GetMeasureTypeQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetMeasureType = <
  TData = Awaited<ReturnType<typeof getMeasureType>>,
  TError = void,
>(
  params?: GetMeasureTypeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureType>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureTypeQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postMeasureType = (
  measureType: MeasureType,
  params?: PostMeasureTypeParams
) => {
  return configRequest<void>({
    url: `/MeasureType`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: measureType,
    params,
  })
}

export const getPostMeasureTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMeasureType>>,
    TError,
    { data: MeasureType; params?: PostMeasureTypeParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMeasureType>>,
  TError,
  { data: MeasureType; params?: PostMeasureTypeParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMeasureType>>,
    { data: MeasureType; params?: PostMeasureTypeParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postMeasureType(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostMeasureTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMeasureType>>
>
export type PostMeasureTypeMutationBody = MeasureType
export type PostMeasureTypeMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostMeasureType = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMeasureType>>,
    TError,
    { data: MeasureType; params?: PostMeasureTypeParams },
    TContext
  >
}) => {
  const mutationOptions = getPostMeasureTypeMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getMeasureTypeCount = (
  params?: GetMeasureTypeCountParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureType[]>({
    url: `/MeasureType/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureTypeCountQueryKey = (
  params?: GetMeasureTypeCountParams
) => {
  return [`/MeasureType/$count`, ...(params ? [params] : [])] as const
}

export const getGetMeasureTypeCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureTypeCount>>,
  TError = void,
>(
  params?: GetMeasureTypeCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMeasureTypeCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureTypeCount>>
  > = ({ signal }) => getMeasureTypeCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureTypeCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureTypeCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureTypeCount>>
>
export type GetMeasureTypeCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetMeasureTypeCount = <
  TData = Awaited<ReturnType<typeof getMeasureTypeCount>>,
  TError = void,
>(
  params?: GetMeasureTypeCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureTypeCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getMeasureTypeFromKey = (
  key: number,
  params?: GetMeasureTypeFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<MeasureType>({
    url: `/MeasureType/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMeasureTypeFromKeyQueryKey = (
  key: number,
  params?: GetMeasureTypeFromKeyParams
) => {
  return [`/MeasureType/${key}`, ...(params ? [params] : [])] as const
}

export const getGetMeasureTypeFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeasureTypeFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureTypeFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMeasureTypeFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMeasureTypeFromKey>>
  > = ({ signal }) => getMeasureTypeFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeasureTypeFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMeasureTypeFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeasureTypeFromKey>>
>
export type GetMeasureTypeFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetMeasureTypeFromKey = <
  TData = Awaited<ReturnType<typeof getMeasureTypeFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMeasureTypeFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMeasureTypeFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMeasureTypeFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putMeasureTypeFromKey = (
  key: number,
  measureType: MeasureType,
  params?: PutMeasureTypeFromKeyParams
) => {
  return configRequest<void>({
    url: `/MeasureType/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: measureType,
    params,
  })
}

export const getPutMeasureTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMeasureTypeFromKey>>,
    TError,
    { key: number; data: MeasureType; params?: PutMeasureTypeFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putMeasureTypeFromKey>>,
  TError,
  { key: number; data: MeasureType; params?: PutMeasureTypeFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putMeasureTypeFromKey>>,
    { key: number; data: MeasureType; params?: PutMeasureTypeFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putMeasureTypeFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutMeasureTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putMeasureTypeFromKey>>
>
export type PutMeasureTypeFromKeyMutationBody = MeasureType
export type PutMeasureTypeFromKeyMutationError = unknown

export const usePutMeasureTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMeasureTypeFromKey>>,
    TError,
    { key: number; data: MeasureType; params?: PutMeasureTypeFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutMeasureTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchMeasureTypeFromKey = (
  key: number,
  measureType: MeasureType,
  params?: PatchMeasureTypeFromKeyParams
) => {
  return configRequest<void>({
    url: `/MeasureType/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: measureType,
    params,
  })
}

export const getPatchMeasureTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchMeasureTypeFromKey>>,
    TError,
    { key: number; data: MeasureType; params?: PatchMeasureTypeFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchMeasureTypeFromKey>>,
  TError,
  { key: number; data: MeasureType; params?: PatchMeasureTypeFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchMeasureTypeFromKey>>,
    { key: number; data: MeasureType; params?: PatchMeasureTypeFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchMeasureTypeFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchMeasureTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchMeasureTypeFromKey>>
>
export type PatchMeasureTypeFromKeyMutationBody = MeasureType
export type PatchMeasureTypeFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchMeasureTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchMeasureTypeFromKey>>,
    TError,
    { key: number; data: MeasureType; params?: PatchMeasureTypeFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchMeasureTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteMeasureTypeFromKey = (key: number) => {
  return configRequest<void>({
    url: `/MeasureType/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteMeasureTypeFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteMeasureTypeFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteMeasureTypeFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>
>

export type DeleteMeasureTypeFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteMeasureTypeFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMeasureTypeFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteMeasureTypeFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getMenuItems = (
  params?: GetMenuItemsParams,
  signal?: AbortSignal
) => {
  return configRequest<MenuItem[]>({
    url: `/MenuItems`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMenuItemsQueryKey = (params?: GetMenuItemsParams) => {
  return [`/MenuItems`, ...(params ? [params] : [])] as const
}

export const getGetMenuItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getMenuItems>>,
  TError = void,
>(
  params?: GetMenuItemsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMenuItems>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetMenuItemsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMenuItems>>> = ({
    signal,
  }) => getMenuItems(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMenuItems>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMenuItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMenuItems>>
>
export type GetMenuItemsQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetMenuItems = <
  TData = Awaited<ReturnType<typeof getMenuItems>>,
  TError = void,
>(
  params?: GetMenuItemsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMenuItems>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMenuItemsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postMenuItems = (
  menuItem: MenuItem,
  params?: PostMenuItemsParams
) => {
  return configRequest<void>({
    url: `/MenuItems`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: menuItem,
    params,
  })
}

export const getPostMenuItemsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuItems>>,
    TError,
    { data: MenuItem; params?: PostMenuItemsParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMenuItems>>,
  TError,
  { data: MenuItem; params?: PostMenuItemsParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMenuItems>>,
    { data: MenuItem; params?: PostMenuItemsParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postMenuItems(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostMenuItemsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMenuItems>>
>
export type PostMenuItemsMutationBody = MenuItem
export type PostMenuItemsMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostMenuItems = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMenuItems>>,
    TError,
    { data: MenuItem; params?: PostMenuItemsParams },
    TContext
  >
}) => {
  const mutationOptions = getPostMenuItemsMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getMenuItemsCount = (
  params?: GetMenuItemsCountParams,
  signal?: AbortSignal
) => {
  return configRequest<MenuItem[]>({
    url: `/MenuItems/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMenuItemsCountQueryKey = (
  params?: GetMenuItemsCountParams
) => {
  return [`/MenuItems/$count`, ...(params ? [params] : [])] as const
}

export const getGetMenuItemsCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getMenuItemsCount>>,
  TError = void,
>(
  params?: GetMenuItemsCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMenuItemsCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMenuItemsCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMenuItemsCount>>
  > = ({ signal }) => getMenuItemsCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMenuItemsCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMenuItemsCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMenuItemsCount>>
>
export type GetMenuItemsCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetMenuItemsCount = <
  TData = Awaited<ReturnType<typeof getMenuItemsCount>>,
  TError = void,
>(
  params?: GetMenuItemsCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMenuItemsCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMenuItemsCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getMenuItemsFromKey = (
  key: number,
  params?: GetMenuItemsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<MenuItem>({
    url: `/MenuItems/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetMenuItemsFromKeyQueryKey = (
  key: number,
  params?: GetMenuItemsFromKeyParams
) => {
  return [`/MenuItems/${key}`, ...(params ? [params] : [])] as const
}

export const getGetMenuItemsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getMenuItemsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMenuItemsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMenuItemsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetMenuItemsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMenuItemsFromKey>>
  > = ({ signal }) => getMenuItemsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMenuItemsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetMenuItemsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMenuItemsFromKey>>
>
export type GetMenuItemsFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetMenuItemsFromKey = <
  TData = Awaited<ReturnType<typeof getMenuItemsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetMenuItemsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getMenuItemsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMenuItemsFromKeyQueryOptions(key, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putMenuItemsFromKey = (
  key: number,
  menuItem: MenuItem,
  params?: PutMenuItemsFromKeyParams
) => {
  return configRequest<void>({
    url: `/MenuItems/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: menuItem,
    params,
  })
}

export const getPutMenuItemsFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMenuItemsFromKey>>,
    TError,
    { key: number; data: MenuItem; params?: PutMenuItemsFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putMenuItemsFromKey>>,
  TError,
  { key: number; data: MenuItem; params?: PutMenuItemsFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putMenuItemsFromKey>>,
    { key: number; data: MenuItem; params?: PutMenuItemsFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putMenuItemsFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutMenuItemsFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putMenuItemsFromKey>>
>
export type PutMenuItemsFromKeyMutationBody = MenuItem
export type PutMenuItemsFromKeyMutationError = unknown

export const usePutMenuItemsFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMenuItemsFromKey>>,
    TError,
    { key: number; data: MenuItem; params?: PutMenuItemsFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutMenuItemsFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchMenuItemsFromKey = (
  key: number,
  menuItem: MenuItem,
  params?: PatchMenuItemsFromKeyParams
) => {
  return configRequest<void>({
    url: `/MenuItems/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: menuItem,
    params,
  })
}

export const getPatchMenuItemsFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchMenuItemsFromKey>>,
    TError,
    { key: number; data: MenuItem; params?: PatchMenuItemsFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchMenuItemsFromKey>>,
  TError,
  { key: number; data: MenuItem; params?: PatchMenuItemsFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchMenuItemsFromKey>>,
    { key: number; data: MenuItem; params?: PatchMenuItemsFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchMenuItemsFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchMenuItemsFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchMenuItemsFromKey>>
>
export type PatchMenuItemsFromKeyMutationBody = MenuItem
export type PatchMenuItemsFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchMenuItemsFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchMenuItemsFromKey>>,
    TError,
    { key: number; data: MenuItem; params?: PatchMenuItemsFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchMenuItemsFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteMenuItemsFromKey = (key: number) => {
  return configRequest<void>({
    url: `/MenuItems/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteMenuItemsFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenuItemsFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMenuItemsFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMenuItemsFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteMenuItemsFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteMenuItemsFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMenuItemsFromKey>>
>

export type DeleteMenuItemsFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteMenuItemsFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMenuItemsFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteMenuItemsFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getProduct = (params?: GetProductParams, signal?: AbortSignal) => {
  return configRequest<Product[]>({
    url: `/Product`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetProductQueryKey = (params?: GetProductParams) => {
  return [`/Product`, ...(params ? [params] : [])] as const
}

export const getGetProductQueryOptions = <
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = void,
>(
  params?: GetProductParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProduct>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetProductQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProduct>>> = ({
    signal,
  }) => getProduct(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProduct>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetProductQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProduct>>
>
export type GetProductQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetProduct = <
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = void,
>(
  params?: GetProductParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProduct>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postProduct = (product: Product, params?: PostProductParams) => {
  return configRequest<void>({
    url: `/Product`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: product,
    params,
  })
}

export const getPostProductMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProduct>>,
    TError,
    { data: Product; params?: PostProductParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProduct>>,
  TError,
  { data: Product; params?: PostProductParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProduct>>,
    { data: Product; params?: PostProductParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postProduct(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProduct>>
>
export type PostProductMutationBody = Product
export type PostProductMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostProduct = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProduct>>,
    TError,
    { data: Product; params?: PostProductParams },
    TContext
  >
}) => {
  const mutationOptions = getPostProductMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getProductCount = (
  params?: GetProductCountParams,
  signal?: AbortSignal
) => {
  return configRequest<Product[]>({
    url: `/Product/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetProductCountQueryKey = (params?: GetProductCountParams) => {
  return [`/Product/$count`, ...(params ? [params] : [])] as const
}

export const getGetProductCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductCount>>,
  TError = void,
>(
  params?: GetProductCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetProductCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductCount>>> = ({
    signal,
  }) => getProductCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetProductCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductCount>>
>
export type GetProductCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetProductCount = <
  TData = Awaited<ReturnType<typeof getProductCount>>,
  TError = void,
>(
  params?: GetProductCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getProductFromKey = (
  key: number,
  params?: GetProductFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Product>({
    url: `/Product/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetProductFromKeyQueryKey = (
  key: number,
  params?: GetProductFromKeyParams
) => {
  return [`/Product/${key}`, ...(params ? [params] : [])] as const
}

export const getGetProductFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetProductFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetProductFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductFromKey>>
  > = ({ signal }) => getProductFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetProductFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductFromKey>>
>
export type GetProductFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetProductFromKey = <
  TData = Awaited<ReturnType<typeof getProductFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetProductFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProductFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductFromKeyQueryOptions(key, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putProductFromKey = (
  key: number,
  product: Product,
  params?: PutProductFromKeyParams
) => {
  return configRequest<void>({
    url: `/Product/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: product,
    params,
  })
}

export const getPutProductFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProductFromKey>>,
    TError,
    { key: number; data: Product; params?: PutProductFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putProductFromKey>>,
  TError,
  { key: number; data: Product; params?: PutProductFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putProductFromKey>>,
    { key: number; data: Product; params?: PutProductFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putProductFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutProductFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putProductFromKey>>
>
export type PutProductFromKeyMutationBody = Product
export type PutProductFromKeyMutationError = unknown

export const usePutProductFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProductFromKey>>,
    TError,
    { key: number; data: Product; params?: PutProductFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutProductFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchProductFromKey = (
  key: number,
  product: Product,
  params?: PatchProductFromKeyParams
) => {
  return configRequest<void>({
    url: `/Product/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: product,
    params,
  })
}

export const getPatchProductFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchProductFromKey>>,
    TError,
    { key: number; data: Product; params?: PatchProductFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchProductFromKey>>,
  TError,
  { key: number; data: Product; params?: PatchProductFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchProductFromKey>>,
    { key: number; data: Product; params?: PatchProductFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchProductFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchProductFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchProductFromKey>>
>
export type PatchProductFromKeyMutationBody = Product
export type PatchProductFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchProductFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchProductFromKey>>,
    TError,
    { key: number; data: Product; params?: PatchProductFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchProductFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteProductFromKey = (key: number) => {
  return configRequest<void>({
    url: `/Product/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteProductFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProductFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProductFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteProductFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteProductFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProductFromKey>>
>

export type DeleteProductFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteProductFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteProductFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getRegionLocationsFromKey = (
  key: number,
  params?: GetRegionLocationsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/Region/${key}/locations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRegionLocationsFromKeyQueryKey = (
  key: number,
  params?: GetRegionLocationsFromKeyParams
) => {
  return [`/Region/${key}/locations`, ...(params ? [params] : [])] as const
}

export const getGetRegionLocationsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRegionLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRegionLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRegionLocationsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRegionLocationsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRegionLocationsFromKey>>
  > = ({ signal }) => getRegionLocationsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRegionLocationsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRegionLocationsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRegionLocationsFromKey>>
>
export type GetRegionLocationsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const useGetRegionLocationsFromKey = <
  TData = Awaited<ReturnType<typeof getRegionLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRegionLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRegionLocationsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRegionLocationsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const getRegionLocationsCountFromKey = (
  key: number,
  params?: GetRegionLocationsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Location[]>({
    url: `/Region/${key}/locations/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRegionLocationsCountFromKeyQueryKey = (
  key: number,
  params?: GetRegionLocationsCountFromKeyParams
) => {
  return [
    `/Region/${key}/locations/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetRegionLocationsCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRegionLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRegionLocationsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>
  > = ({ signal }) => getRegionLocationsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRegionLocationsCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>
>
export type GetRegionLocationsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const useGetRegionLocationsCountFromKey = <
  TData = Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRegionLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRegionLocationsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRegionLocationsCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postRegion = (region: Region, params?: PostRegionParams) => {
  return configRequest<void>({
    url: `/Region`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: region,
    params,
  })
}

export const getPostRegionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRegion>>,
    TError,
    { data: Region; params?: PostRegionParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRegion>>,
  TError,
  { data: Region; params?: PostRegionParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRegion>>,
    { data: Region; params?: PostRegionParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postRegion(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostRegionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRegion>>
>
export type PostRegionMutationBody = Region
export type PostRegionMutationError = unknown

export const usePostRegion = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRegion>>,
    TError,
    { data: Region; params?: PostRegionParams },
    TContext
  >
}) => {
  const mutationOptions = getPostRegionMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getRegion = (params?: GetRegionParams, signal?: AbortSignal) => {
  return configRequest<Region[]>({
    url: `/Region`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRegionQueryKey = (params?: GetRegionParams) => {
  return [`/Region`, ...(params ? [params] : [])] as const
}

export const getGetRegionQueryOptions = <
  TData = Awaited<ReturnType<typeof getRegion>>,
  TError = void,
>(
  params?: GetRegionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRegion>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRegionQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRegion>>> = ({
    signal,
  }) => getRegion(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRegion>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRegionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRegion>>
>
export type GetRegionQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetRegion = <
  TData = Awaited<ReturnType<typeof getRegion>>,
  TError = void,
>(
  params?: GetRegionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRegion>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRegionQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const patchRegionFromKey = (
  key: number,
  region: Region,
  params?: PatchRegionFromKeyParams
) => {
  return configRequest<void>({
    url: `/Region/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: region,
    params,
  })
}

export const getPatchRegionFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRegionFromKey>>,
    TError,
    { key: number; data: Region; params?: PatchRegionFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchRegionFromKey>>,
  TError,
  { key: number; data: Region; params?: PatchRegionFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRegionFromKey>>,
    { key: number; data: Region; params?: PatchRegionFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchRegionFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchRegionFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchRegionFromKey>>
>
export type PatchRegionFromKeyMutationBody = Region
export type PatchRegionFromKeyMutationError = unknown

export const usePatchRegionFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRegionFromKey>>,
    TError,
    { key: number; data: Region; params?: PatchRegionFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchRegionFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

export const deleteRegionFromKey = (key: number) => {
  return configRequest<void>({ url: `/Region/${key}`, method: 'DELETE' })
}

export const getDeleteRegionFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRegionFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRegionFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRegionFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteRegionFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteRegionFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRegionFromKey>>
>

export type DeleteRegionFromKeyMutationError = unknown

export const useDeleteRegionFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRegionFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteRegionFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary object with key from oData query.
 */
export const getRegionFromKey = (
  key: number,
  params?: GetRegionFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Region>({
    url: `/Region/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRegionFromKeyQueryKey = (
  key: number,
  params?: GetRegionFromKeyParams
) => {
  return [`/Region/${key}`, ...(params ? [params] : [])] as const
}

export const getGetRegionFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRegionFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRegionFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRegionFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRegionFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRegionFromKey>>
  > = ({ signal }) => getRegionFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRegionFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRegionFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRegionFromKey>>
>
export type GetRegionFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetRegionFromKey = <
  TData = Awaited<ReturnType<typeof getRegionFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRegionFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRegionFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRegionFromKeyQueryOptions(key, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putRegionFromKey = (
  key: number,
  region: Region,
  params?: PutRegionFromKeyParams
) => {
  return configRequest<void>({
    url: `/Region/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: region,
    params,
  })
}

export const getPutRegionFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putRegionFromKey>>,
    TError,
    { key: number; data: Region; params?: PutRegionFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putRegionFromKey>>,
  TError,
  { key: number; data: Region; params?: PutRegionFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putRegionFromKey>>,
    { key: number; data: Region; params?: PutRegionFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putRegionFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutRegionFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putRegionFromKey>>
>
export type PutRegionFromKeyMutationBody = Region
export type PutRegionFromKeyMutationError = unknown

export const usePutRegionFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putRegionFromKey>>,
    TError,
    { key: number; data: Region; params?: PutRegionFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutRegionFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getRegionCount = (
  params?: GetRegionCountParams,
  signal?: AbortSignal
) => {
  return configRequest<Region[]>({
    url: `/Region/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRegionCountQueryKey = (params?: GetRegionCountParams) => {
  return [`/Region/$count`, ...(params ? [params] : [])] as const
}

export const getGetRegionCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getRegionCount>>,
  TError = void,
>(
  params?: GetRegionCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRegionCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRegionCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRegionCount>>> = ({
    signal,
  }) => getRegionCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRegionCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRegionCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRegionCount>>
>
export type GetRegionCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetRegionCount = <
  TData = Awaited<ReturnType<typeof getRegionCount>>,
  TError = void,
>(
  params?: GetRegionCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRegionCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRegionCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteRouteLocationsFromKey = (
  key: number,
  params?: GetRouteRouteLocationsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/Route/${key}/routeLocations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteRouteLocationsFromKeyQueryKey = (
  key: number,
  params?: GetRouteRouteLocationsFromKeyParams
) => {
  return [`/Route/${key}/routeLocations`, ...(params ? [params] : [])] as const
}

export const getGetRouteRouteLocationsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteRouteLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRouteRouteLocationsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>
  > = ({ signal }) => getRouteRouteLocationsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteRouteLocationsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>
>
export type GetRouteRouteLocationsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const useGetRouteRouteLocationsFromKey = <
  TData = Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteRouteLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteRouteLocationsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteRouteLocationsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteRouteLocationsCountFromKey = (
  key: number,
  params?: GetRouteRouteLocationsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/Route/${key}/routeLocations/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteRouteLocationsCountFromKeyQueryKey = (
  key: number,
  params?: GetRouteRouteLocationsCountFromKeyParams
) => {
  return [
    `/Route/${key}/routeLocations/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetRouteRouteLocationsCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteRouteLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRouteRouteLocationsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>
  > = ({ signal }) => getRouteRouteLocationsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteRouteLocationsCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>
>
export type GetRouteRouteLocationsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const useGetRouteRouteLocationsCountFromKey = <
  TData = Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteRouteLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteRouteLocationsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteRouteLocationsCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Creates a route with its associated route locations
 */
export const upsertRouteRoute = (
  routeDto: RouteDto,
  params?: UpsertRouteRouteParams
) => {
  return configRequest<void>({
    url: `/UpsertRoute`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: routeDto,
    params,
  })
}

export const getUpsertRouteRouteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof upsertRouteRoute>>,
    TError,
    { data: RouteDto; params?: UpsertRouteRouteParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof upsertRouteRoute>>,
  TError,
  { data: RouteDto; params?: UpsertRouteRouteParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof upsertRouteRoute>>,
    { data: RouteDto; params?: UpsertRouteRouteParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return upsertRouteRoute(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpsertRouteRouteMutationResult = NonNullable<
  Awaited<ReturnType<typeof upsertRouteRoute>>
>
export type UpsertRouteRouteMutationBody = RouteDto
export type UpsertRouteRouteMutationError = unknown

/**
 * @summary Creates a route with its associated route locations
 */
export const useUpsertRouteRoute = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof upsertRouteRoute>>,
    TError,
    { data: RouteDto; params?: UpsertRouteRouteParams },
    TContext
  >
}) => {
  const mutationOptions = getUpsertRouteRouteMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getRouteRouteViewFromId = (
  id: number,
  params?: GetRouteRouteViewFromIdParams,
  signal?: AbortSignal
) => {
  return configRequest<void>({
    url: `/GetRouteView/${id}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteRouteViewFromIdQueryKey = (
  id: number,
  params?: GetRouteRouteViewFromIdParams
) => {
  return [`/GetRouteView/${id}`, ...(params ? [params] : [])] as const
}

export const getGetRouteRouteViewFromIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteRouteViewFromId>>,
  TError = unknown,
>(
  id: number,
  params?: GetRouteRouteViewFromIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteRouteViewFromId>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRouteRouteViewFromIdQueryKey(id, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteRouteViewFromId>>
  > = ({ signal }) => getRouteRouteViewFromId(id, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteRouteViewFromId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteRouteViewFromIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteRouteViewFromId>>
>
export type GetRouteRouteViewFromIdQueryError = unknown

export const useGetRouteRouteViewFromId = <
  TData = Awaited<ReturnType<typeof getRouteRouteViewFromId>>,
  TError = unknown,
>(
  id: number,
  params?: GetRouteRouteViewFromIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteRouteViewFromId>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteRouteViewFromIdQueryOptions(
    id,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Collection of objects from oData query.
 */
export const getRoute = (params?: GetRouteParams, signal?: AbortSignal) => {
  return configRequest<Route[]>({
    url: `/Route`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteQueryKey = (params?: GetRouteParams) => {
  return [`/Route`, ...(params ? [params] : [])] as const
}

export const getGetRouteQueryOptions = <
  TData = Awaited<ReturnType<typeof getRoute>>,
  TError = void,
>(
  params?: GetRouteParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getRoute>>, TError, TData>
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRouteQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoute>>> = ({
    signal,
  }) => getRoute(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRoute>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRoute>>
>
export type GetRouteQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetRoute = <
  TData = Awaited<ReturnType<typeof getRoute>>,
  TError = void,
>(
  params?: GetRouteParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getRoute>>, TError, TData>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postRoute = (route: Route, params?: PostRouteParams) => {
  return configRequest<void>({
    url: `/Route`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: route,
    params,
  })
}

export const getPostRouteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRoute>>,
    TError,
    { data: Route; params?: PostRouteParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRoute>>,
  TError,
  { data: Route; params?: PostRouteParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRoute>>,
    { data: Route; params?: PostRouteParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postRoute(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostRouteMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRoute>>
>
export type PostRouteMutationBody = Route
export type PostRouteMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostRoute = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRoute>>,
    TError,
    { data: Route; params?: PostRouteParams },
    TContext
  >
}) => {
  const mutationOptions = getPostRouteMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getRouteCount = (
  params?: GetRouteCountParams,
  signal?: AbortSignal
) => {
  return configRequest<Route[]>({
    url: `/Route/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteCountQueryKey = (params?: GetRouteCountParams) => {
  return [`/Route/$count`, ...(params ? [params] : [])] as const
}

export const getGetRouteCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteCount>>,
  TError = void,
>(
  params?: GetRouteCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRouteCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteCount>>> = ({
    signal,
  }) => getRouteCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteCount>>
>
export type GetRouteCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetRouteCount = <
  TData = Awaited<ReturnType<typeof getRouteCount>>,
  TError = void,
>(
  params?: GetRouteCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getRouteFromKey = (
  key: number,
  params?: GetRouteFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<Route>({
    url: `/Route/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteFromKeyQueryKey = (
  key: number,
  params?: GetRouteFromKeyParams
) => {
  return [`/Route/${key}`, ...(params ? [params] : [])] as const
}

export const getGetRouteFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRouteFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouteFromKey>>> = ({
    signal,
  }) => getRouteFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteFromKey>>
>
export type GetRouteFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetRouteFromKey = <
  TData = Awaited<ReturnType<typeof getRouteFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteFromKeyQueryOptions(key, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putRouteFromKey = (
  key: number,
  route: Route,
  params?: PutRouteFromKeyParams
) => {
  return configRequest<void>({
    url: `/Route/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: route,
    params,
  })
}

export const getPutRouteFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putRouteFromKey>>,
    TError,
    { key: number; data: Route; params?: PutRouteFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putRouteFromKey>>,
  TError,
  { key: number; data: Route; params?: PutRouteFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putRouteFromKey>>,
    { key: number; data: Route; params?: PutRouteFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putRouteFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutRouteFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putRouteFromKey>>
>
export type PutRouteFromKeyMutationBody = Route
export type PutRouteFromKeyMutationError = unknown

export const usePutRouteFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putRouteFromKey>>,
    TError,
    { key: number; data: Route; params?: PutRouteFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPutRouteFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchRouteFromKey = (
  key: number,
  route: Route,
  params?: PatchRouteFromKeyParams
) => {
  return configRequest<void>({
    url: `/Route/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: route,
    params,
  })
}

export const getPatchRouteFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRouteFromKey>>,
    TError,
    { key: number; data: Route; params?: PatchRouteFromKeyParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchRouteFromKey>>,
  TError,
  { key: number; data: Route; params?: PatchRouteFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRouteFromKey>>,
    { key: number; data: Route; params?: PatchRouteFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchRouteFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchRouteFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchRouteFromKey>>
>
export type PatchRouteFromKeyMutationBody = Route
export type PatchRouteFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchRouteFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRouteFromKey>>,
    TError,
    { key: number; data: Route; params?: PatchRouteFromKeyParams },
    TContext
  >
}) => {
  const mutationOptions = getPatchRouteFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteRouteFromKey = (key: number) => {
  return configRequest<void>({ url: `/Route/${key}`, method: 'DELETE' })
}

export const getDeleteRouteFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRouteFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRouteFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRouteFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteRouteFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteRouteFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRouteFromKey>>
>

export type DeleteRouteFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteRouteFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRouteFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteRouteFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteDistancePreviousLocationsFromKey = (
  key: number,
  params?: GetRouteDistancePreviousLocationsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/RouteDistance/${key}/previousLocations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteDistancePreviousLocationsFromKeyQueryKey = (
  key: number,
  params?: GetRouteDistancePreviousLocationsFromKeyParams
) => {
  return [
    `/RouteDistance/${key}/previousLocations`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetRouteDistancePreviousLocationsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteDistancePreviousLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRouteDistancePreviousLocationsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>
  > = ({ signal }) =>
    getRouteDistancePreviousLocationsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteDistancePreviousLocationsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>
>
export type GetRouteDistancePreviousLocationsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const useGetRouteDistancePreviousLocationsFromKey = <
  TData = Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteDistancePreviousLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistancePreviousLocationsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteDistancePreviousLocationsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteDistancePreviousLocationsCountFromKey = (
  key: number,
  params?: GetRouteDistancePreviousLocationsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/RouteDistance/${key}/previousLocations/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteDistancePreviousLocationsCountFromKeyQueryKey = (
  key: number,
  params?: GetRouteDistancePreviousLocationsCountFromKeyParams
) => {
  return [
    `/RouteDistance/${key}/previousLocations/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetRouteDistancePreviousLocationsCountFromKeyQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>
  >,
  TError = void,
>(
  key: number,
  params?: GetRouteDistancePreviousLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRouteDistancePreviousLocationsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>
  > = ({ signal }) =>
    getRouteDistancePreviousLocationsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteDistancePreviousLocationsCountFromKeyQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>
  >
export type GetRouteDistancePreviousLocationsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const useGetRouteDistancePreviousLocationsCountFromKey = <
  TData = Awaited<
    ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>
  >,
  TError = void,
>(
  key: number,
  params?: GetRouteDistancePreviousLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistancePreviousLocationsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetRouteDistancePreviousLocationsCountFromKeyQueryOptions(
      key,
      params,
      options
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteDistanceNextLocationsFromKey = (
  key: number,
  params?: GetRouteDistanceNextLocationsFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/RouteDistance/${key}/nextLocations`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteDistanceNextLocationsFromKeyQueryKey = (
  key: number,
  params?: GetRouteDistanceNextLocationsFromKeyParams
) => {
  return [
    `/RouteDistance/${key}/nextLocations`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetRouteDistanceNextLocationsFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteDistanceNextLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRouteDistanceNextLocationsFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>
  > = ({ signal }) => getRouteDistanceNextLocationsFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteDistanceNextLocationsFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>
>
export type GetRouteDistanceNextLocationsFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const useGetRouteDistanceNextLocationsFromKey = <
  TData = Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteDistanceNextLocationsFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistanceNextLocationsFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteDistanceNextLocationsFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const getRouteDistanceNextLocationsCountFromKey = (
  key: number,
  params?: GetRouteDistanceNextLocationsCountFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/RouteDistance/${key}/nextLocations/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteDistanceNextLocationsCountFromKeyQueryKey = (
  key: number,
  params?: GetRouteDistanceNextLocationsCountFromKeyParams
) => {
  return [
    `/RouteDistance/${key}/nextLocations/$count`,
    ...(params ? [params] : []),
  ] as const
}

export const getGetRouteDistanceNextLocationsCountFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteDistanceNextLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetRouteDistanceNextLocationsCountFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>
  > = ({ signal }) =>
    getRouteDistanceNextLocationsCountFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteDistanceNextLocationsCountFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>
>
export type GetRouteDistanceNextLocationsCountFromKeyQueryError = void

/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const useGetRouteDistanceNextLocationsCountFromKey = <
  TData = Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteDistanceNextLocationsCountFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistanceNextLocationsCountFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteDistanceNextLocationsCountFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Gets the Utah.Udot.Atspm.Data.Models.RouteDistance that contains locationA and locationB
 */
export const getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB =
  (
    locationA: string,
    locationB: string,
    params?: GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams,
    signal?: AbortSignal
  ) => {
    return configRequest<RouteDistance | void>({
      url: `/RouteDistance/GetRouteDistanceByLocationIdentifiers(locationA=${locationA},locationB=${locationB})`,
      method: 'GET',
      params,
      signal,
    })
  }

export const getGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryKey =
  (
    locationA: string,
    locationB: string,
    params?: GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams
  ) => {
    return [
      `/RouteDistance/GetRouteDistanceByLocationIdentifiers(locationA=${locationA},locationB=${locationB})`,
      ...(params ? [params] : []),
    ] as const
  }

export const getGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB
      >
    >,
    TError = unknown,
  >(
    locationA: string,
    locationB: string,
    params?: GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB
          >
        >,
        TError,
        TData
      >
    }
  ) => {
    const { query: queryOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryKey(
        locationA,
        locationB,
        params
      )

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB
        >
      >
    > = ({ signal }) =>
      getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB(
        locationA,
        locationB,
        params,
        signal
      )

    return {
      queryKey,
      queryFn,
      enabled: !!(locationA && locationB),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB
        >
      >,
      TError,
      TData
    > & { queryKey: QueryKey }
  }

export type GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB
      >
    >
  >
export type GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryError =
  unknown

/**
 * @summary Gets the Utah.Udot.Atspm.Data.Models.RouteDistance that contains locationA and locationB
 */
export const useGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB =
  <
    TData = Awaited<
      ReturnType<
        typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB
      >
    >,
    TError = unknown,
  >(
    locationA: string,
    locationB: string,
    params?: GetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBParams,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationB
          >
        >,
        TError,
        TData
      >
    }
  ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
      getGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBQueryOptions(
        locationA,
        locationB,
        params,
        options
      )

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
      queryKey: QueryKey
    }

    query.queryKey = queryOptions.queryKey

    return query
  }

/**
 * @summary Collection of objects from oData query.
 */
export const getRouteDistance = (
  params?: GetRouteDistanceParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteDistance[]>({
    url: `/RouteDistance`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteDistanceQueryKey = (
  params?: GetRouteDistanceParams
) => {
  return [`/RouteDistance`, ...(params ? [params] : [])] as const
}

export const getGetRouteDistanceQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteDistance>>,
  TError = void,
>(
  params?: GetRouteDistanceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistance>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRouteDistanceQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteDistance>>
  > = ({ signal }) => getRouteDistance(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteDistance>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteDistanceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteDistance>>
>
export type GetRouteDistanceQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetRouteDistance = <
  TData = Awaited<ReturnType<typeof getRouteDistance>>,
  TError = void,
>(
  params?: GetRouteDistanceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistance>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteDistanceQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postRouteDistance = (
  routeDistance: RouteDistance,
  params?: PostRouteDistanceParams
) => {
  return configRequest<void>({
    url: `/RouteDistance`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: routeDistance,
    params,
  })
}

export const getPostRouteDistanceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRouteDistance>>,
    TError,
    { data: RouteDistance; params?: PostRouteDistanceParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRouteDistance>>,
  TError,
  { data: RouteDistance; params?: PostRouteDistanceParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRouteDistance>>,
    { data: RouteDistance; params?: PostRouteDistanceParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postRouteDistance(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostRouteDistanceMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRouteDistance>>
>
export type PostRouteDistanceMutationBody = RouteDistance
export type PostRouteDistanceMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostRouteDistance = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRouteDistance>>,
    TError,
    { data: RouteDistance; params?: PostRouteDistanceParams },
    TContext
  >
}) => {
  const mutationOptions = getPostRouteDistanceMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getRouteDistanceCount = (
  params?: GetRouteDistanceCountParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteDistance[]>({
    url: `/RouteDistance/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteDistanceCountQueryKey = (
  params?: GetRouteDistanceCountParams
) => {
  return [`/RouteDistance/$count`, ...(params ? [params] : [])] as const
}

export const getGetRouteDistanceCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteDistanceCount>>,
  TError = void,
>(
  params?: GetRouteDistanceCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistanceCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRouteDistanceCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteDistanceCount>>
  > = ({ signal }) => getRouteDistanceCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteDistanceCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteDistanceCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteDistanceCount>>
>
export type GetRouteDistanceCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetRouteDistanceCount = <
  TData = Awaited<ReturnType<typeof getRouteDistanceCount>>,
  TError = void,
>(
  params?: GetRouteDistanceCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistanceCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteDistanceCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getRouteDistanceFromKey = (
  key: number,
  params?: GetRouteDistanceFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteDistance>({
    url: `/RouteDistance/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteDistanceFromKeyQueryKey = (
  key: number,
  params?: GetRouteDistanceFromKeyParams
) => {
  return [`/RouteDistance/${key}`, ...(params ? [params] : [])] as const
}

export const getGetRouteDistanceFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteDistanceFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteDistanceFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistanceFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRouteDistanceFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteDistanceFromKey>>
  > = ({ signal }) => getRouteDistanceFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteDistanceFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteDistanceFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteDistanceFromKey>>
>
export type GetRouteDistanceFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetRouteDistanceFromKey = <
  TData = Awaited<ReturnType<typeof getRouteDistanceFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteDistanceFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteDistanceFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteDistanceFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putRouteDistanceFromKey = (
  key: number,
  routeDistance: RouteDistance,
  params?: PutRouteDistanceFromKeyParams
) => {
  return configRequest<void>({
    url: `/RouteDistance/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: routeDistance,
    params,
  })
}

export const getPutRouteDistanceFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putRouteDistanceFromKey>>,
    TError,
    {
      key: number
      data: RouteDistance
      params?: PutRouteDistanceFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putRouteDistanceFromKey>>,
  TError,
  { key: number; data: RouteDistance; params?: PutRouteDistanceFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putRouteDistanceFromKey>>,
    { key: number; data: RouteDistance; params?: PutRouteDistanceFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putRouteDistanceFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutRouteDistanceFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putRouteDistanceFromKey>>
>
export type PutRouteDistanceFromKeyMutationBody = RouteDistance
export type PutRouteDistanceFromKeyMutationError = unknown

export const usePutRouteDistanceFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putRouteDistanceFromKey>>,
    TError,
    {
      key: number
      data: RouteDistance
      params?: PutRouteDistanceFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPutRouteDistanceFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchRouteDistanceFromKey = (
  key: number,
  routeDistance: RouteDistance,
  params?: PatchRouteDistanceFromKeyParams
) => {
  return configRequest<void>({
    url: `/RouteDistance/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: routeDistance,
    params,
  })
}

export const getPatchRouteDistanceFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRouteDistanceFromKey>>,
    TError,
    {
      key: number
      data: RouteDistance
      params?: PatchRouteDistanceFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchRouteDistanceFromKey>>,
  TError,
  {
    key: number
    data: RouteDistance
    params?: PatchRouteDistanceFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRouteDistanceFromKey>>,
    {
      key: number
      data: RouteDistance
      params?: PatchRouteDistanceFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchRouteDistanceFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchRouteDistanceFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchRouteDistanceFromKey>>
>
export type PatchRouteDistanceFromKeyMutationBody = RouteDistance
export type PatchRouteDistanceFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchRouteDistanceFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRouteDistanceFromKey>>,
    TError,
    {
      key: number
      data: RouteDistance
      params?: PatchRouteDistanceFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPatchRouteDistanceFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteRouteDistanceFromKey = (key: number) => {
  return configRequest<void>({
    url: `/RouteDistance/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteRouteDistanceFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteRouteDistanceFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteRouteDistanceFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>
>

export type DeleteRouteDistanceFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteRouteDistanceFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRouteDistanceFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteRouteDistanceFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getRouteLocation = (
  params?: GetRouteLocationParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/RouteLocation`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteLocationQueryKey = (
  params?: GetRouteLocationParams
) => {
  return [`/RouteLocation`, ...(params ? [params] : [])] as const
}

export const getGetRouteLocationQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteLocation>>,
  TError = void,
>(
  params?: GetRouteLocationParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteLocation>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRouteLocationQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteLocation>>
  > = ({ signal }) => getRouteLocation(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteLocation>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteLocationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteLocation>>
>
export type GetRouteLocationQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetRouteLocation = <
  TData = Awaited<ReturnType<typeof getRouteLocation>>,
  TError = void,
>(
  params?: GetRouteLocationParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteLocation>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteLocationQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postRouteLocation = (
  routeLocation: RouteLocation,
  params?: PostRouteLocationParams
) => {
  return configRequest<void>({
    url: `/RouteLocation`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: routeLocation,
    params,
  })
}

export const getPostRouteLocationMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRouteLocation>>,
    TError,
    { data: RouteLocation; params?: PostRouteLocationParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRouteLocation>>,
  TError,
  { data: RouteLocation; params?: PostRouteLocationParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRouteLocation>>,
    { data: RouteLocation; params?: PostRouteLocationParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postRouteLocation(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostRouteLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRouteLocation>>
>
export type PostRouteLocationMutationBody = RouteLocation
export type PostRouteLocationMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostRouteLocation = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRouteLocation>>,
    TError,
    { data: RouteLocation; params?: PostRouteLocationParams },
    TContext
  >
}) => {
  const mutationOptions = getPostRouteLocationMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getRouteLocationCount = (
  params?: GetRouteLocationCountParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation[]>({
    url: `/RouteLocation/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteLocationCountQueryKey = (
  params?: GetRouteLocationCountParams
) => {
  return [`/RouteLocation/$count`, ...(params ? [params] : [])] as const
}

export const getGetRouteLocationCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteLocationCount>>,
  TError = void,
>(
  params?: GetRouteLocationCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteLocationCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRouteLocationCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteLocationCount>>
  > = ({ signal }) => getRouteLocationCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteLocationCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteLocationCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteLocationCount>>
>
export type GetRouteLocationCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetRouteLocationCount = <
  TData = Awaited<ReturnType<typeof getRouteLocationCount>>,
  TError = void,
>(
  params?: GetRouteLocationCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteLocationCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteLocationCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getRouteLocationFromKey = (
  key: number,
  params?: GetRouteLocationFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<RouteLocation>({
    url: `/RouteLocation/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetRouteLocationFromKeyQueryKey = (
  key: number,
  params?: GetRouteLocationFromKeyParams
) => {
  return [`/RouteLocation/${key}`, ...(params ? [params] : [])] as const
}

export const getGetRouteLocationFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getRouteLocationFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteLocationFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteLocationFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRouteLocationFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRouteLocationFromKey>>
  > = ({ signal }) => getRouteLocationFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRouteLocationFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRouteLocationFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRouteLocationFromKey>>
>
export type GetRouteLocationFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetRouteLocationFromKey = <
  TData = Awaited<ReturnType<typeof getRouteLocationFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetRouteLocationFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRouteLocationFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRouteLocationFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putRouteLocationFromKey = (
  key: number,
  routeLocation: RouteLocation,
  params?: PutRouteLocationFromKeyParams
) => {
  return configRequest<void>({
    url: `/RouteLocation/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: routeLocation,
    params,
  })
}

export const getPutRouteLocationFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putRouteLocationFromKey>>,
    TError,
    {
      key: number
      data: RouteLocation
      params?: PutRouteLocationFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putRouteLocationFromKey>>,
  TError,
  { key: number; data: RouteLocation; params?: PutRouteLocationFromKeyParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putRouteLocationFromKey>>,
    { key: number; data: RouteLocation; params?: PutRouteLocationFromKeyParams }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putRouteLocationFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutRouteLocationFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putRouteLocationFromKey>>
>
export type PutRouteLocationFromKeyMutationBody = RouteLocation
export type PutRouteLocationFromKeyMutationError = unknown

export const usePutRouteLocationFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putRouteLocationFromKey>>,
    TError,
    {
      key: number
      data: RouteLocation
      params?: PutRouteLocationFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPutRouteLocationFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchRouteLocationFromKey = (
  key: number,
  routeLocation: RouteLocation,
  params?: PatchRouteLocationFromKeyParams
) => {
  return configRequest<void>({
    url: `/RouteLocation/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: routeLocation,
    params,
  })
}

export const getPatchRouteLocationFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRouteLocationFromKey>>,
    TError,
    {
      key: number
      data: RouteLocation
      params?: PatchRouteLocationFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchRouteLocationFromKey>>,
  TError,
  {
    key: number
    data: RouteLocation
    params?: PatchRouteLocationFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRouteLocationFromKey>>,
    {
      key: number
      data: RouteLocation
      params?: PatchRouteLocationFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchRouteLocationFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchRouteLocationFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchRouteLocationFromKey>>
>
export type PatchRouteLocationFromKeyMutationBody = RouteLocation
export type PatchRouteLocationFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchRouteLocationFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRouteLocationFromKey>>,
    TError,
    {
      key: number
      data: RouteLocation
      params?: PatchRouteLocationFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPatchRouteLocationFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteRouteLocationFromKey = (key: number) => {
  return configRequest<void>({
    url: `/RouteLocation/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteRouteLocationFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRouteLocationFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRouteLocationFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRouteLocationFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteRouteLocationFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteRouteLocationFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRouteLocationFromKey>>
>

export type DeleteRouteLocationFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteRouteLocationFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRouteLocationFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteRouteLocationFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getVersionHistory = (
  params?: GetVersionHistoryParams,
  signal?: AbortSignal
) => {
  return configRequest<VersionHistory[]>({
    url: `/VersionHistory`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetVersionHistoryQueryKey = (
  params?: GetVersionHistoryParams
) => {
  return [`/VersionHistory`, ...(params ? [params] : [])] as const
}

export const getGetVersionHistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getVersionHistory>>,
  TError = void,
>(
  params?: GetVersionHistoryParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getVersionHistory>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetVersionHistoryQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVersionHistory>>
  > = ({ signal }) => getVersionHistory(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVersionHistory>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetVersionHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVersionHistory>>
>
export type GetVersionHistoryQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetVersionHistory = <
  TData = Awaited<ReturnType<typeof getVersionHistory>>,
  TError = void,
>(
  params?: GetVersionHistoryParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getVersionHistory>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetVersionHistoryQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postVersionHistory = (
  versionHistory: VersionHistory,
  params?: PostVersionHistoryParams
) => {
  return configRequest<void>({
    url: `/VersionHistory`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: versionHistory,
    params,
  })
}

export const getPostVersionHistoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postVersionHistory>>,
    TError,
    { data: VersionHistory; params?: PostVersionHistoryParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postVersionHistory>>,
  TError,
  { data: VersionHistory; params?: PostVersionHistoryParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postVersionHistory>>,
    { data: VersionHistory; params?: PostVersionHistoryParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postVersionHistory(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostVersionHistoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof postVersionHistory>>
>
export type PostVersionHistoryMutationBody = VersionHistory
export type PostVersionHistoryMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostVersionHistory = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postVersionHistory>>,
    TError,
    { data: VersionHistory; params?: PostVersionHistoryParams },
    TContext
  >
}) => {
  const mutationOptions = getPostVersionHistoryMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getVersionHistoryCount = (
  params?: GetVersionHistoryCountParams,
  signal?: AbortSignal
) => {
  return configRequest<VersionHistory[]>({
    url: `/VersionHistory/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetVersionHistoryCountQueryKey = (
  params?: GetVersionHistoryCountParams
) => {
  return [`/VersionHistory/$count`, ...(params ? [params] : [])] as const
}

export const getGetVersionHistoryCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getVersionHistoryCount>>,
  TError = void,
>(
  params?: GetVersionHistoryCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getVersionHistoryCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetVersionHistoryCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVersionHistoryCount>>
  > = ({ signal }) => getVersionHistoryCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVersionHistoryCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetVersionHistoryCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVersionHistoryCount>>
>
export type GetVersionHistoryCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetVersionHistoryCount = <
  TData = Awaited<ReturnType<typeof getVersionHistoryCount>>,
  TError = void,
>(
  params?: GetVersionHistoryCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getVersionHistoryCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetVersionHistoryCountQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getVersionHistoryFromKey = (
  key: number,
  params?: GetVersionHistoryFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<VersionHistory>({
    url: `/VersionHistory/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetVersionHistoryFromKeyQueryKey = (
  key: number,
  params?: GetVersionHistoryFromKeyParams
) => {
  return [`/VersionHistory/${key}`, ...(params ? [params] : [])] as const
}

export const getGetVersionHistoryFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getVersionHistoryFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetVersionHistoryFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getVersionHistoryFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetVersionHistoryFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVersionHistoryFromKey>>
  > = ({ signal }) => getVersionHistoryFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getVersionHistoryFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetVersionHistoryFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVersionHistoryFromKey>>
>
export type GetVersionHistoryFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetVersionHistoryFromKey = <
  TData = Awaited<ReturnType<typeof getVersionHistoryFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetVersionHistoryFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getVersionHistoryFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetVersionHistoryFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putVersionHistoryFromKey = (
  key: number,
  versionHistory: VersionHistory,
  params?: PutVersionHistoryFromKeyParams
) => {
  return configRequest<void>({
    url: `/VersionHistory/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: versionHistory,
    params,
  })
}

export const getPutVersionHistoryFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putVersionHistoryFromKey>>,
    TError,
    {
      key: number
      data: VersionHistory
      params?: PutVersionHistoryFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putVersionHistoryFromKey>>,
  TError,
  {
    key: number
    data: VersionHistory
    params?: PutVersionHistoryFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putVersionHistoryFromKey>>,
    {
      key: number
      data: VersionHistory
      params?: PutVersionHistoryFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putVersionHistoryFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutVersionHistoryFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putVersionHistoryFromKey>>
>
export type PutVersionHistoryFromKeyMutationBody = VersionHistory
export type PutVersionHistoryFromKeyMutationError = unknown

export const usePutVersionHistoryFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putVersionHistoryFromKey>>,
    TError,
    {
      key: number
      data: VersionHistory
      params?: PutVersionHistoryFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPutVersionHistoryFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchVersionHistoryFromKey = (
  key: number,
  versionHistory: VersionHistory,
  params?: PatchVersionHistoryFromKeyParams
) => {
  return configRequest<void>({
    url: `/VersionHistory/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: versionHistory,
    params,
  })
}

export const getPatchVersionHistoryFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchVersionHistoryFromKey>>,
    TError,
    {
      key: number
      data: VersionHistory
      params?: PatchVersionHistoryFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchVersionHistoryFromKey>>,
  TError,
  {
    key: number
    data: VersionHistory
    params?: PatchVersionHistoryFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchVersionHistoryFromKey>>,
    {
      key: number
      data: VersionHistory
      params?: PatchVersionHistoryFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchVersionHistoryFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchVersionHistoryFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchVersionHistoryFromKey>>
>
export type PatchVersionHistoryFromKeyMutationBody = VersionHistory
export type PatchVersionHistoryFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchVersionHistoryFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchVersionHistoryFromKey>>,
    TError,
    {
      key: number
      data: VersionHistory
      params?: PatchVersionHistoryFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions = getPatchVersionHistoryFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteVersionHistoryFromKey = (key: number) => {
  return configRequest<void>({
    url: `/VersionHistory/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteVersionHistoryFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteVersionHistoryFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteVersionHistoryFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>
>

export type DeleteVersionHistoryFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteVersionHistoryFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteVersionHistoryFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions = getDeleteVersionHistoryFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getWatchDogIgnoreEvent = (
  params?: GetWatchDogIgnoreEventParams,
  signal?: AbortSignal
) => {
  return configRequest<WatchDogIgnoreEvent[]>({
    url: `/WatchDogIgnoreEvent`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetWatchDogIgnoreEventQueryKey = (
  params?: GetWatchDogIgnoreEventParams
) => {
  return [`/WatchDogIgnoreEvent`, ...(params ? [params] : [])] as const
}

export const getGetWatchDogIgnoreEventQueryOptions = <
  TData = Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>,
  TError = void,
>(
  params?: GetWatchDogIgnoreEventParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetWatchDogIgnoreEventQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>
  > = ({ signal }) => getWatchDogIgnoreEvent(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetWatchDogIgnoreEventQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>
>
export type GetWatchDogIgnoreEventQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetWatchDogIgnoreEvent = <
  TData = Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>,
  TError = void,
>(
  params?: GetWatchDogIgnoreEventParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWatchDogIgnoreEvent>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWatchDogIgnoreEventQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Insert object of specified type
 */
export const postWatchDogIgnoreEvent = (
  watchDogIgnoreEvent: WatchDogIgnoreEvent,
  params?: PostWatchDogIgnoreEventParams
) => {
  return configRequest<void>({
    url: `/WatchDogIgnoreEvent`,
    method: 'POST',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: watchDogIgnoreEvent,
    params,
  })
}

export const getPostWatchDogIgnoreEventMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>,
    TError,
    { data: WatchDogIgnoreEvent; params?: PostWatchDogIgnoreEventParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>,
  TError,
  { data: WatchDogIgnoreEvent; params?: PostWatchDogIgnoreEventParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>,
    { data: WatchDogIgnoreEvent; params?: PostWatchDogIgnoreEventParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return postWatchDogIgnoreEvent(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostWatchDogIgnoreEventMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>
>
export type PostWatchDogIgnoreEventMutationBody = WatchDogIgnoreEvent
export type PostWatchDogIgnoreEventMutationError = unknown

/**
 * @summary Insert object of specified type
 */
export const usePostWatchDogIgnoreEvent = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWatchDogIgnoreEvent>>,
    TError,
    { data: WatchDogIgnoreEvent; params?: PostWatchDogIgnoreEventParams },
    TContext
  >
}) => {
  const mutationOptions = getPostWatchDogIgnoreEventMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Collection of objects from oData query.
 */
export const getWatchDogIgnoreEventCount = (
  params?: GetWatchDogIgnoreEventCountParams,
  signal?: AbortSignal
) => {
  return configRequest<WatchDogIgnoreEvent[]>({
    url: `/WatchDogIgnoreEvent/$count`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetWatchDogIgnoreEventCountQueryKey = (
  params?: GetWatchDogIgnoreEventCountParams
) => {
  return [`/WatchDogIgnoreEvent/$count`, ...(params ? [params] : [])] as const
}

export const getGetWatchDogIgnoreEventCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>,
  TError = void,
>(
  params?: GetWatchDogIgnoreEventCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetWatchDogIgnoreEventCountQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>
  > = ({ signal }) => getWatchDogIgnoreEventCount(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetWatchDogIgnoreEventCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>
>
export type GetWatchDogIgnoreEventCountQueryError = void

/**
 * @summary Collection of objects from oData query.
 */
export const useGetWatchDogIgnoreEventCount = <
  TData = Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>,
  TError = void,
>(
  params?: GetWatchDogIgnoreEventCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWatchDogIgnoreEventCount>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWatchDogIgnoreEventCountQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary object with key from oData query.
 */
export const getWatchDogIgnoreEventFromKey = (
  key: number,
  params?: GetWatchDogIgnoreEventFromKeyParams,
  signal?: AbortSignal
) => {
  return configRequest<WatchDogIgnoreEvent>({
    url: `/WatchDogIgnoreEvent/${key}`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetWatchDogIgnoreEventFromKeyQueryKey = (
  key: number,
  params?: GetWatchDogIgnoreEventFromKeyParams
) => {
  return [`/WatchDogIgnoreEvent/${key}`, ...(params ? [params] : [])] as const
}

export const getGetWatchDogIgnoreEventFromKeyQueryOptions = <
  TData = Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetWatchDogIgnoreEventFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetWatchDogIgnoreEventFromKeyQueryKey(key, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>
  > = ({ signal }) => getWatchDogIgnoreEventFromKey(key, params, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!key,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetWatchDogIgnoreEventFromKeyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>
>
export type GetWatchDogIgnoreEventFromKeyQueryError = void

/**
 * @summary object with key from oData query.
 */
export const useGetWatchDogIgnoreEventFromKey = <
  TData = Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>,
  TError = void,
>(
  key: number,
  params?: GetWatchDogIgnoreEventFromKeyParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWatchDogIgnoreEventFromKey>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWatchDogIgnoreEventFromKeyQueryOptions(
    key,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putWatchDogIgnoreEventFromKey = (
  key: number,
  watchDogIgnoreEvent: WatchDogIgnoreEvent,
  params?: PutWatchDogIgnoreEventFromKeyParams
) => {
  return configRequest<void>({
    url: `/WatchDogIgnoreEvent/${key}`,
    method: 'PUT',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: watchDogIgnoreEvent,
    params,
  })
}

export const getPutWatchDogIgnoreEventFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>,
    TError,
    {
      key: number
      data: WatchDogIgnoreEvent
      params?: PutWatchDogIgnoreEventFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>,
  TError,
  {
    key: number
    data: WatchDogIgnoreEvent
    params?: PutWatchDogIgnoreEventFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>,
    {
      key: number
      data: WatchDogIgnoreEvent
      params?: PutWatchDogIgnoreEventFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return putWatchDogIgnoreEventFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutWatchDogIgnoreEventFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>
>
export type PutWatchDogIgnoreEventFromKeyMutationBody = WatchDogIgnoreEvent
export type PutWatchDogIgnoreEventFromKeyMutationError = unknown

export const usePutWatchDogIgnoreEventFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putWatchDogIgnoreEventFromKey>>,
    TError,
    {
      key: number
      data: WatchDogIgnoreEvent
      params?: PutWatchDogIgnoreEventFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions =
    getPutWatchDogIgnoreEventFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update object of specified type
 */
export const patchWatchDogIgnoreEventFromKey = (
  key: number,
  watchDogIgnoreEvent: WatchDogIgnoreEvent,
  params?: PatchWatchDogIgnoreEventFromKeyParams
) => {
  return configRequest<void>({
    url: `/WatchDogIgnoreEvent/${key}`,
    method: 'PATCH',
    headers: {
      'Content-Type':
        'application/json;odata.metadata=minimal;odata.streaming=true',
    },
    data: watchDogIgnoreEvent,
    params,
  })
}

export const getPatchWatchDogIgnoreEventFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>,
    TError,
    {
      key: number
      data: WatchDogIgnoreEvent
      params?: PatchWatchDogIgnoreEventFromKeyParams
    },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>,
  TError,
  {
    key: number
    data: WatchDogIgnoreEvent
    params?: PatchWatchDogIgnoreEventFromKeyParams
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>,
    {
      key: number
      data: WatchDogIgnoreEvent
      params?: PatchWatchDogIgnoreEventFromKeyParams
    }
  > = (props) => {
    const { key, data, params } = props ?? {}

    return patchWatchDogIgnoreEventFromKey(key, data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchWatchDogIgnoreEventFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>
>
export type PatchWatchDogIgnoreEventFromKeyMutationBody = WatchDogIgnoreEvent
export type PatchWatchDogIgnoreEventFromKeyMutationError = unknown

/**
 * @summary Update object of specified type
 */
export const usePatchWatchDogIgnoreEventFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchWatchDogIgnoreEventFromKey>>,
    TError,
    {
      key: number
      data: WatchDogIgnoreEvent
      params?: PatchWatchDogIgnoreEventFromKeyParams
    },
    TContext
  >
}) => {
  const mutationOptions =
    getPatchWatchDogIgnoreEventFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Delete object of specified type
 */
export const deleteWatchDogIgnoreEventFromKey = (key: number) => {
  return configRequest<void>({
    url: `/WatchDogIgnoreEvent/${key}`,
    method: 'DELETE',
  })
}

export const getDeleteWatchDogIgnoreEventFromKeyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>,
    TError,
    { key: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>,
  TError,
  { key: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>,
    { key: number }
  > = (props) => {
    const { key } = props ?? {}

    return deleteWatchDogIgnoreEventFromKey(key)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteWatchDogIgnoreEventFromKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>
>

export type DeleteWatchDogIgnoreEventFromKeyMutationError = unknown

/**
 * @summary Delete object of specified type
 */
export const useDeleteWatchDogIgnoreEventFromKey = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWatchDogIgnoreEventFromKey>>,
    TError,
    { key: number },
    TContext
  >
}) => {
  const mutationOptions =
    getDeleteWatchDogIgnoreEventFromKeyMutationOptions(options)

  return useMutation(mutationOptions)
}
