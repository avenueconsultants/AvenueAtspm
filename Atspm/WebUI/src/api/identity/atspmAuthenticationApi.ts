/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Atspm Authentication Api
 * OpenAPI spec version: v1
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from 'react-query'
import { useMutation, useQuery } from 'react-query'
import { identityRequest } from '../../lib/axios'
import type {
  ChangePasswordViewModel,
  ClaimModel,
  ClaimsModel,
  CreateRoleViewModel,
  ForgotPasswordViewModel,
  LoginViewModel,
  ProblemDetails,
  RegisterViewModel,
  UpdateProfileViewModel,
  UserDTO,
  VerifyConnectTokenViewModel,
  VerifyResetTokenViewModel,
  VerifyUserPasswordResetViewModel,
} from './atspmAuthenticationApi.schemas'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >
}[keyof T]

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never

type Writable<T> = Pick<T, WritableKeys<T>>
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P]
    }
  : DistributeReadOnlyOverUnions<T>

export const postApiV1AccountRegister = (
  registerViewModel: RegisterViewModel
) => {
  return identityRequest<unknown>({
    url: `/Account/register`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: registerViewModel,
  })
}

export const getPostApiV1AccountRegisterMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountRegister>>,
    TError,
    { data: RegisterViewModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AccountRegister>>,
  TError,
  { data: RegisterViewModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AccountRegister>>,
    { data: RegisterViewModel }
  > = (props) => {
    const { data } = props ?? {}

    return postApiV1AccountRegister(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1AccountRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AccountRegister>>
>
export type PostApiV1AccountRegisterMutationBody = RegisterViewModel
export type PostApiV1AccountRegisterMutationError = ProblemDetails

export const usePostApiV1AccountRegister = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountRegister>>,
    TError,
    { data: RegisterViewModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AccountRegister>>,
  TError,
  { data: RegisterViewModel },
  TContext
> => {
  const mutationOptions = getPostApiV1AccountRegisterMutationOptions(options)

  return useMutation(mutationOptions)
}

export const postApiV1AccountLogin = (loginViewModel: LoginViewModel) => {
  return identityRequest<unknown>({
    url: `/Account/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: loginViewModel,
  })
}

export const getPostApiV1AccountLoginMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountLogin>>,
    TError,
    { data: LoginViewModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AccountLogin>>,
  TError,
  { data: LoginViewModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AccountLogin>>,
    { data: LoginViewModel }
  > = (props) => {
    const { data } = props ?? {}

    return postApiV1AccountLogin(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1AccountLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AccountLogin>>
>
export type PostApiV1AccountLoginMutationBody = LoginViewModel
export type PostApiV1AccountLoginMutationError = ProblemDetails

export const usePostApiV1AccountLogin = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountLogin>>,
    TError,
    { data: LoginViewModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AccountLogin>>,
  TError,
  { data: LoginViewModel },
  TContext
> => {
  const mutationOptions = getPostApiV1AccountLoginMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getApiV1AccountExternalLogin = (signal?: AbortSignal) => {
  return identityRequest<unknown>({
    url: `/Account/external-login`,
    method: 'GET',
    signal,
  })
}

export const getGetApiV1AccountExternalLoginQueryKey = () => {
  return [`/Account/external-login`] as const
}

export const getGetApiV1AccountExternalLoginQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1AccountExternalLogin>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AccountExternalLogin>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1AccountExternalLoginQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1AccountExternalLogin>>
  > = ({ signal }) => getApiV1AccountExternalLogin(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AccountExternalLogin>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApiV1AccountExternalLoginQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1AccountExternalLogin>>
>
export type GetApiV1AccountExternalLoginQueryError = ProblemDetails

export function useGetApiV1AccountExternalLogin<
  TData = Awaited<ReturnType<typeof getApiV1AccountExternalLogin>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AccountExternalLogin>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1AccountExternalLoginQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postApiV1AccountOIDCLoginCallback = () => {
  return identityRequest<unknown>({
    url: `/Account/OIDCLoginCallback`,
    method: 'POST',
  })
}

export const getPostApiV1AccountOIDCLoginCallbackMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountOIDCLoginCallback>>,
    TError,
    void,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AccountOIDCLoginCallback>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AccountOIDCLoginCallback>>,
    void
  > = () => {
    return postApiV1AccountOIDCLoginCallback()
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1AccountOIDCLoginCallbackMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AccountOIDCLoginCallback>>
>

export type PostApiV1AccountOIDCLoginCallbackMutationError = ProblemDetails

export const usePostApiV1AccountOIDCLoginCallback = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountOIDCLoginCallback>>,
    TError,
    void,
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AccountOIDCLoginCallback>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV1AccountOIDCLoginCallbackMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getApiV1AccountOIDCLoginCallback = (signal?: AbortSignal) => {
  return identityRequest<unknown>({
    url: `/Account/OIDCLoginCallback`,
    method: 'GET',
    signal,
  })
}

export const getGetApiV1AccountOIDCLoginCallbackQueryKey = () => {
  return [`/Account/OIDCLoginCallback`] as const
}

export const getGetApiV1AccountOIDCLoginCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1AccountOIDCLoginCallback>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AccountOIDCLoginCallback>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1AccountOIDCLoginCallbackQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1AccountOIDCLoginCallback>>
  > = ({ signal }) => getApiV1AccountOIDCLoginCallback(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AccountOIDCLoginCallback>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApiV1AccountOIDCLoginCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1AccountOIDCLoginCallback>>
>
export type GetApiV1AccountOIDCLoginCallbackQueryError = ProblemDetails

export function useGetApiV1AccountOIDCLoginCallback<
  TData = Awaited<ReturnType<typeof getApiV1AccountOIDCLoginCallback>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AccountOIDCLoginCallback>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1AccountOIDCLoginCallbackQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postApiV1AccountLinkExternalLogin = () => {
  return identityRequest<unknown>({
    url: `/Account/link-external-login`,
    method: 'POST',
  })
}

export const getPostApiV1AccountLinkExternalLoginMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountLinkExternalLogin>>,
    TError,
    void,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AccountLinkExternalLogin>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AccountLinkExternalLogin>>,
    void
  > = () => {
    return postApiV1AccountLinkExternalLogin()
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1AccountLinkExternalLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AccountLinkExternalLogin>>
>

export type PostApiV1AccountLinkExternalLoginMutationError = ProblemDetails

export const usePostApiV1AccountLinkExternalLogin = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountLinkExternalLogin>>,
    TError,
    void,
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AccountLinkExternalLogin>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV1AccountLinkExternalLoginMutationOptions(options)

  return useMutation(mutationOptions)
}

export const postApiV1AccountLogout = () => {
  return identityRequest<unknown>({ url: `/Account/logout`, method: 'POST' })
}

export const getPostApiV1AccountLogoutMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountLogout>>,
    TError,
    void,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AccountLogout>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AccountLogout>>,
    void
  > = () => {
    return postApiV1AccountLogout()
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1AccountLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AccountLogout>>
>

export type PostApiV1AccountLogoutMutationError = ProblemDetails

export const usePostApiV1AccountLogout = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountLogout>>,
    TError,
    void,
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AccountLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1AccountLogoutMutationOptions(options)

  return useMutation(mutationOptions)
}

export const postApiV1AccountChangepassword = (
  changePasswordViewModel: ChangePasswordViewModel
) => {
  return identityRequest<unknown>({
    url: `/Account/changepassword`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: changePasswordViewModel,
  })
}

export const getPostApiV1AccountChangepasswordMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountChangepassword>>,
    TError,
    { data: ChangePasswordViewModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AccountChangepassword>>,
  TError,
  { data: ChangePasswordViewModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AccountChangepassword>>,
    { data: ChangePasswordViewModel }
  > = (props) => {
    const { data } = props ?? {}

    return postApiV1AccountChangepassword(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1AccountChangepasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AccountChangepassword>>
>
export type PostApiV1AccountChangepasswordMutationBody = ChangePasswordViewModel
export type PostApiV1AccountChangepasswordMutationError = ProblemDetails

export const usePostApiV1AccountChangepassword = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountChangepassword>>,
    TError,
    { data: ChangePasswordViewModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AccountChangepassword>>,
  TError,
  { data: ChangePasswordViewModel },
  TContext
> => {
  const mutationOptions =
    getPostApiV1AccountChangepasswordMutationOptions(options)

  return useMutation(mutationOptions)
}

export const postApiV1AccountForgotpassword = (
  forgotPasswordViewModel: ForgotPasswordViewModel
) => {
  return identityRequest<unknown>({
    url: `/Account/forgotpassword`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: forgotPasswordViewModel,
  })
}

export const getPostApiV1AccountForgotpasswordMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountForgotpassword>>,
    TError,
    { data: ForgotPasswordViewModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AccountForgotpassword>>,
  TError,
  { data: ForgotPasswordViewModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AccountForgotpassword>>,
    { data: ForgotPasswordViewModel }
  > = (props) => {
    const { data } = props ?? {}

    return postApiV1AccountForgotpassword(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1AccountForgotpasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AccountForgotpassword>>
>
export type PostApiV1AccountForgotpasswordMutationBody = ForgotPasswordViewModel
export type PostApiV1AccountForgotpasswordMutationError = ProblemDetails

export const usePostApiV1AccountForgotpassword = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountForgotpassword>>,
    TError,
    { data: ForgotPasswordViewModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AccountForgotpassword>>,
  TError,
  { data: ForgotPasswordViewModel },
  TContext
> => {
  const mutationOptions =
    getPostApiV1AccountForgotpasswordMutationOptions(options)

  return useMutation(mutationOptions)
}

export const postApiV1AccountVerifyUserPasswordReset = (
  verifyUserPasswordResetViewModel: VerifyUserPasswordResetViewModel
) => {
  return identityRequest<unknown>({
    url: `/Account/verifyUserPasswordReset`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: verifyUserPasswordResetViewModel,
  })
}

export const getPostApiV1AccountVerifyUserPasswordResetMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountVerifyUserPasswordReset>>,
    TError,
    { data: VerifyUserPasswordResetViewModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AccountVerifyUserPasswordReset>>,
  TError,
  { data: VerifyUserPasswordResetViewModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AccountVerifyUserPasswordReset>>,
    { data: VerifyUserPasswordResetViewModel }
  > = (props) => {
    const { data } = props ?? {}

    return postApiV1AccountVerifyUserPasswordReset(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1AccountVerifyUserPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AccountVerifyUserPasswordReset>>
>
export type PostApiV1AccountVerifyUserPasswordResetMutationBody =
  VerifyUserPasswordResetViewModel
export type PostApiV1AccountVerifyUserPasswordResetMutationError =
  ProblemDetails

export const usePostApiV1AccountVerifyUserPasswordReset = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AccountVerifyUserPasswordReset>>,
    TError,
    { data: VerifyUserPasswordResetViewModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AccountVerifyUserPasswordReset>>,
  TError,
  { data: VerifyUserPasswordResetViewModel },
  TContext
> => {
  const mutationOptions =
    getPostApiV1AccountVerifyUserPasswordResetMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getApiV1Claims = (signal?: AbortSignal) => {
  return identityRequest<unknown>({ url: `/Claims`, method: 'GET', signal })
}

export const getGetApiV1ClaimsQueryKey = () => {
  return [`/Claims`] as const
}

export const getGetApiV1ClaimsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Claims>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Claims>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ClaimsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Claims>>> = ({
    signal,
  }) => getApiV1Claims(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Claims>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApiV1ClaimsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Claims>>
>
export type GetApiV1ClaimsQueryError = ProblemDetails

export function useGetApiV1Claims<
  TData = Awaited<ReturnType<typeof getApiV1Claims>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Claims>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ClaimsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getApiV1ClaimsRoleName = (
  roleName: string,
  signal?: AbortSignal
) => {
  return identityRequest<unknown>({
    url: `/Claims/${roleName}`,
    method: 'GET',
    signal,
  })
}

export const getGetApiV1ClaimsRoleNameQueryKey = (roleName: string) => {
  return [`/Claims/${roleName}`] as const
}

export const getGetApiV1ClaimsRoleNameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ClaimsRoleName>>,
  TError = ProblemDetails,
>(
  roleName: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ClaimsRoleName>>,
      TError,
      TData
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ClaimsRoleNameQueryKey(roleName)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ClaimsRoleName>>
  > = ({ signal }) => getApiV1ClaimsRoleName(roleName, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!roleName,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ClaimsRoleName>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApiV1ClaimsRoleNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ClaimsRoleName>>
>
export type GetApiV1ClaimsRoleNameQueryError = ProblemDetails

export function useGetApiV1ClaimsRoleName<
  TData = Awaited<ReturnType<typeof getApiV1ClaimsRoleName>>,
  TError = ProblemDetails,
>(
  roleName: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ClaimsRoleName>>,
      TError,
      TData
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ClaimsRoleNameQueryOptions(roleName, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postApiV1ClaimsRoleName = (
  roleName: string,
  claimModel: ClaimModel
) => {
  return identityRequest<unknown>({
    url: `/Claims/${roleName}`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: claimModel,
  })
}

export const getPostApiV1ClaimsRoleNameMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ClaimsRoleName>>,
    TError,
    { roleName: string; data: ClaimModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ClaimsRoleName>>,
  TError,
  { roleName: string; data: ClaimModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ClaimsRoleName>>,
    { roleName: string; data: ClaimModel }
  > = (props) => {
    const { roleName, data } = props ?? {}

    return postApiV1ClaimsRoleName(roleName, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1ClaimsRoleNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ClaimsRoleName>>
>
export type PostApiV1ClaimsRoleNameMutationBody = ClaimModel
export type PostApiV1ClaimsRoleNameMutationError = ProblemDetails

export const usePostApiV1ClaimsRoleName = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ClaimsRoleName>>,
    TError,
    { roleName: string; data: ClaimModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1ClaimsRoleName>>,
  TError,
  { roleName: string; data: ClaimModel },
  TContext
> => {
  const mutationOptions = getPostApiV1ClaimsRoleNameMutationOptions(options)

  return useMutation(mutationOptions)
}

export const deleteApiV1ClaimsRoleName = (
  roleName: string,
  claimModel: ClaimModel
) => {
  return identityRequest<unknown>({
    url: `/Claims/${roleName}`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: claimModel,
  })
}

export const getDeleteApiV1ClaimsRoleNameMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ClaimsRoleName>>,
    TError,
    { roleName: string; data: ClaimModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ClaimsRoleName>>,
  TError,
  { roleName: string; data: ClaimModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ClaimsRoleName>>,
    { roleName: string; data: ClaimModel }
  > = (props) => {
    const { roleName, data } = props ?? {}

    return deleteApiV1ClaimsRoleName(roleName, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteApiV1ClaimsRoleNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ClaimsRoleName>>
>
export type DeleteApiV1ClaimsRoleNameMutationBody = ClaimModel
export type DeleteApiV1ClaimsRoleNameMutationError = ProblemDetails

export const useDeleteApiV1ClaimsRoleName = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ClaimsRoleName>>,
    TError,
    { roleName: string; data: ClaimModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1ClaimsRoleName>>,
  TError,
  { roleName: string; data: ClaimModel },
  TContext
> => {
  const mutationOptions = getDeleteApiV1ClaimsRoleNameMutationOptions(options)

  return useMutation(mutationOptions)
}

export const postApiV1ClaimsAddRoleName = (
  roleName: string,
  claimsModel: ClaimsModel
) => {
  return identityRequest<unknown>({
    url: `/Claims/add/${roleName}`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: claimsModel,
  })
}

export const getPostApiV1ClaimsAddRoleNameMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ClaimsAddRoleName>>,
    TError,
    { roleName: string; data: ClaimsModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ClaimsAddRoleName>>,
  TError,
  { roleName: string; data: ClaimsModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ClaimsAddRoleName>>,
    { roleName: string; data: ClaimsModel }
  > = (props) => {
    const { roleName, data } = props ?? {}

    return postApiV1ClaimsAddRoleName(roleName, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1ClaimsAddRoleNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ClaimsAddRoleName>>
>
export type PostApiV1ClaimsAddRoleNameMutationBody = ClaimsModel
export type PostApiV1ClaimsAddRoleNameMutationError = ProblemDetails

export const usePostApiV1ClaimsAddRoleName = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ClaimsAddRoleName>>,
    TError,
    { roleName: string; data: ClaimsModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1ClaimsAddRoleName>>,
  TError,
  { roleName: string; data: ClaimsModel },
  TContext
> => {
  const mutationOptions = getPostApiV1ClaimsAddRoleNameMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getApiV1Profile = (signal?: AbortSignal) => {
  return identityRequest<unknown>({ url: `/Profile`, method: 'GET', signal })
}

export const getGetApiV1ProfileQueryKey = () => {
  return [`/Profile`] as const
}

export const getGetApiV1ProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Profile>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Profile>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ProfileQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Profile>>> = ({
    signal,
  }) => getApiV1Profile(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Profile>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApiV1ProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Profile>>
>
export type GetApiV1ProfileQueryError = ProblemDetails

export function useGetApiV1Profile<
  TData = Awaited<ReturnType<typeof getApiV1Profile>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Profile>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ProfileQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putApiV1Profile = (
  updateProfileViewModel: UpdateProfileViewModel
) => {
  return identityRequest<unknown>({
    url: `/Profile`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateProfileViewModel,
  })
}

export const getPutApiV1ProfileMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Profile>>,
    TError,
    { data: UpdateProfileViewModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1Profile>>,
  TError,
  { data: UpdateProfileViewModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1Profile>>,
    { data: UpdateProfileViewModel }
  > = (props) => {
    const { data } = props ?? {}

    return putApiV1Profile(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutApiV1ProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1Profile>>
>
export type PutApiV1ProfileMutationBody = UpdateProfileViewModel
export type PutApiV1ProfileMutationError = ProblemDetails

export const usePutApiV1Profile = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Profile>>,
    TError,
    { data: UpdateProfileViewModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1Profile>>,
  TError,
  { data: UpdateProfileViewModel },
  TContext
> => {
  const mutationOptions = getPutApiV1ProfileMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getApiV1Roles = (signal?: AbortSignal) => {
  return identityRequest<unknown>({ url: `/Roles`, method: 'GET', signal })
}

export const getGetApiV1RolesQueryKey = () => {
  return [`/Roles`] as const
}

export const getGetApiV1RolesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Roles>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Roles>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1RolesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Roles>>> = ({
    signal,
  }) => getApiV1Roles(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Roles>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApiV1RolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Roles>>
>
export type GetApiV1RolesQueryError = ProblemDetails

export function useGetApiV1Roles<
  TData = Awaited<ReturnType<typeof getApiV1Roles>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Roles>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1RolesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postApiV1Roles = (createRoleViewModel: CreateRoleViewModel) => {
  return identityRequest<unknown>({
    url: `/Roles`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createRoleViewModel,
  })
}

export const getPostApiV1RolesMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Roles>>,
    TError,
    { data: CreateRoleViewModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Roles>>,
  TError,
  { data: CreateRoleViewModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Roles>>,
    { data: CreateRoleViewModel }
  > = (props) => {
    const { data } = props ?? {}

    return postApiV1Roles(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1RolesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Roles>>
>
export type PostApiV1RolesMutationBody = CreateRoleViewModel
export type PostApiV1RolesMutationError = ProblemDetails

export const usePostApiV1Roles = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Roles>>,
    TError,
    { data: CreateRoleViewModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Roles>>,
  TError,
  { data: CreateRoleViewModel },
  TContext
> => {
  const mutationOptions = getPostApiV1RolesMutationOptions(options)

  return useMutation(mutationOptions)
}

export const deleteApiV1RolesRoleName = (roleName: string) => {
  return identityRequest<unknown>({
    url: `/Roles/${roleName}`,
    method: 'DELETE',
  })
}

export const getDeleteApiV1RolesRoleNameMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1RolesRoleName>>,
    TError,
    { roleName: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1RolesRoleName>>,
  TError,
  { roleName: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1RolesRoleName>>,
    { roleName: string }
  > = (props) => {
    const { roleName } = props ?? {}

    return deleteApiV1RolesRoleName(roleName)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteApiV1RolesRoleNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1RolesRoleName>>
>

export type DeleteApiV1RolesRoleNameMutationError = ProblemDetails

export const useDeleteApiV1RolesRoleName = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1RolesRoleName>>,
    TError,
    { roleName: string },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1RolesRoleName>>,
  TError,
  { roleName: string },
  TContext
> => {
  const mutationOptions = getDeleteApiV1RolesRoleNameMutationOptions(options)

  return useMutation(mutationOptions)
}

export const postApiV1TokenVerifyReset = (
  verifyResetTokenViewModel: VerifyResetTokenViewModel
) => {
  return identityRequest<unknown>({
    url: `/Token/verify/reset`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: verifyResetTokenViewModel,
  })
}

export const getPostApiV1TokenVerifyResetMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1TokenVerifyReset>>,
    TError,
    { data: VerifyResetTokenViewModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1TokenVerifyReset>>,
  TError,
  { data: VerifyResetTokenViewModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1TokenVerifyReset>>,
    { data: VerifyResetTokenViewModel }
  > = (props) => {
    const { data } = props ?? {}

    return postApiV1TokenVerifyReset(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1TokenVerifyResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1TokenVerifyReset>>
>
export type PostApiV1TokenVerifyResetMutationBody = VerifyResetTokenViewModel
export type PostApiV1TokenVerifyResetMutationError = ProblemDetails

export const usePostApiV1TokenVerifyReset = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1TokenVerifyReset>>,
    TError,
    { data: VerifyResetTokenViewModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1TokenVerifyReset>>,
  TError,
  { data: VerifyResetTokenViewModel },
  TContext
> => {
  const mutationOptions = getPostApiV1TokenVerifyResetMutationOptions(options)

  return useMutation(mutationOptions)
}

export const postApiV1TokenVerifyConnect = (
  verifyConnectTokenViewModel: VerifyConnectTokenViewModel
) => {
  return identityRequest<unknown>({
    url: `/Token/verify/connect`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: verifyConnectTokenViewModel,
  })
}

export const getPostApiV1TokenVerifyConnectMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1TokenVerifyConnect>>,
    TError,
    { data: VerifyConnectTokenViewModel },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1TokenVerifyConnect>>,
  TError,
  { data: VerifyConnectTokenViewModel },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1TokenVerifyConnect>>,
    { data: VerifyConnectTokenViewModel }
  > = (props) => {
    const { data } = props ?? {}

    return postApiV1TokenVerifyConnect(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1TokenVerifyConnectMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1TokenVerifyConnect>>
>
export type PostApiV1TokenVerifyConnectMutationBody =
  VerifyConnectTokenViewModel
export type PostApiV1TokenVerifyConnectMutationError = ProblemDetails

export const usePostApiV1TokenVerifyConnect = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1TokenVerifyConnect>>,
    TError,
    { data: VerifyConnectTokenViewModel },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1TokenVerifyConnect>>,
  TError,
  { data: VerifyConnectTokenViewModel },
  TContext
> => {
  const mutationOptions = getPostApiV1TokenVerifyConnectMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getApiV1Users = (signal?: AbortSignal) => {
  return identityRequest<unknown>({ url: `/Users`, method: 'GET', signal })
}

export const getGetApiV1UsersQueryKey = () => {
  return [`/Users`] as const
}

export const getGetApiV1UsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Users>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Users>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Users>>> = ({
    signal,
  }) => getApiV1Users(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Users>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApiV1UsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Users>>
>
export type GetApiV1UsersQueryError = ProblemDetails

export function useGetApiV1Users<
  TData = Awaited<ReturnType<typeof getApiV1Users>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Users>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1UsersQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const deleteApiV1UsersUserId = (userId: string) => {
  return identityRequest<unknown>({ url: `/Users/${userId}`, method: 'DELETE' })
}

export const getDeleteApiV1UsersUserIdMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1UsersUserId>>,
    TError,
    { userId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1UsersUserId>>,
  TError,
  { userId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1UsersUserId>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {}

    return deleteApiV1UsersUserId(userId)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteApiV1UsersUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1UsersUserId>>
>

export type DeleteApiV1UsersUserIdMutationError = ProblemDetails

export const useDeleteApiV1UsersUserId = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1UsersUserId>>,
    TError,
    { userId: string },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1UsersUserId>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions = getDeleteApiV1UsersUserIdMutationOptions(options)

  return useMutation(mutationOptions)
}

export const postApiV1UsersUpdate = (userDTO: NonReadonly<UserDTO>) => {
  return identityRequest<unknown>({
    url: `/Users/update`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: userDTO,
  })
}

export const getPostApiV1UsersUpdateMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UsersUpdate>>,
    TError,
    { data: NonReadonly<UserDTO> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1UsersUpdate>>,
  TError,
  { data: NonReadonly<UserDTO> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1UsersUpdate>>,
    { data: NonReadonly<UserDTO> }
  > = (props) => {
    const { data } = props ?? {}

    return postApiV1UsersUpdate(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1UsersUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1UsersUpdate>>
>
export type PostApiV1UsersUpdateMutationBody = NonReadonly<UserDTO>
export type PostApiV1UsersUpdateMutationError = ProblemDetails

export const usePostApiV1UsersUpdate = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UsersUpdate>>,
    TError,
    { data: NonReadonly<UserDTO> },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1UsersUpdate>>,
  TError,
  { data: NonReadonly<UserDTO> },
  TContext
> => {
  const mutationOptions = getPostApiV1UsersUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
